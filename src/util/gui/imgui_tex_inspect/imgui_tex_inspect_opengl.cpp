// ImGuiTexInspect, a texture inspector widget for dear imgui
// adapted from https://github.com/andyborrell/imgui_tex_inspect/


#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

// ==========================================================================
// This file is largely based on:
// https://github.com/ocornut/imgui/blob/master/backends/imgui_impl_opengl3.cpp
//
// In the following section the ImGui_ImplOpenGL3_Init function has been 
// changed to not rewrite global ImGui state.  It has also been wrapped in a 
// namespace to not clash with the main ImGui version.  Aside from that this 
// section is identical to the imgui original.
//
// It's reproduced here because none of this code is exposed in the ImGui API
// in a way that be reused (nor should it be).
//
// Search for "END COPIED" to find the end of the copied segment.
// ===========================================================================

// COPIED FROM imgui_impl_opengl3.cp  ////////////////////////////////////////
#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <wt/util/gui/img_inspect/imgui_tex_inspect.h>
#include <wt/util/gui/img_inspect/imgui_tex_inspect_internal.h>

#include <imgui.h>
#include <backends/imgui_impl_opengl3.h>
#include <cstdio>

// GL includes
// About Desktop OpenGL function loaders:
//  Modern desktop OpenGL doesn't have a standard portable header file to load OpenGL function pointers.
//  Helper libraries are often used for this purpose! Here we are supporting a few common ones (gl3w, glew, glad).
//  You may use another loader/header of your choice (glext, glLoadGen, etc.), or chose to manually implement your own.
#if defined(IMGUI_IMPL_OPENGL_LOADER_GL3W)
#include <GL/gl3w.h>            // Needs to be initialized with gl3wInit() in user's code
#elif defined(IMGUI_IMPL_OPENGL_LOADER_GLEW)
#include <GL/glew.h>            // Needs to be initialized with glewInit() in user's code.
#elif defined(IMGUI_IMPL_OPENGL_LOADER_GLAD)
#include <glad/glad.h>          // Needs to be initialized with gladLoadGL() in user's code.
#elif defined(IMGUI_IMPL_OPENGL_LOADER_GLAD2)
#include <glad/gl.h>            // Needs to be initialized with gladLoadGL(...) or gladLoaderLoadGL() in user's code.
#elif defined(IMGUI_IMPL_OPENGL_LOADER_GLBINDING2)
#ifndef GLFW_INCLUDE_NONE
#define GLFW_INCLUDE_NONE       // GLFW including OpenGL headers causes ambiguity or multiple definition errors.
#endif
#include <glbinding/Binding.h>  // Needs to be initialized with glbinding::Binding::initialize() in user's code.
#include <glbinding/gl/gl.h>
using namespace gl;
#elif defined(IMGUI_IMPL_OPENGL_LOADER_GLBINDING3)
#ifndef GLFW_INCLUDE_NONE
#define GLFW_INCLUDE_NONE       // GLFW including OpenGL headers causes ambiguity or multiple definition errors.
#endif
#include <glbinding/glbinding.h>// Needs to be initialized with glbinding::initialize() in user's code.
#include <glbinding/gl/gl.h>
using namespace gl;
#elif defined(IMGUI_IMPL_OPENGL_LOADER_EPOXY)
#include <epoxy/gl.h>
#else
#include IMGUI_IMPL_OPENGL_LOADER_CUSTOM
#endif

#include <SDL3/SDL_opengl.h>


namespace imgui_impl_opengl {
// OpenGL Data
static GLuint       g_GlVersion = 0;                // Extracted at runtime using GL_MAJOR_VERSION, GL_MINOR_VERSION queries (e.g. 320 for GL 3.2)
static char         g_GlslVersionString[32] = "";   // Specified by user or detected based on compile time GL settings.
static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;
static GLint        g_AttribLocationTex = 0, g_AttribLocationTex0 = 0, g_AttribLocationTex1 = 0, g_AttribLocationTex2 = 0, g_AttribLocationTex3 = 0;
static GLint        g_AttribLocationProjMtx = 0;                                // Uniforms location
static GLuint       g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0; // Vertex attributes location
static GLint        g_UniformLocationForceNearestSampling = 0;
static GLint        g_UniformLocationGridWidth = 0;

// ===========================================================================
//  COPIED FROM A DIFFERENT PART OF imgui_impl_opengl3.cpp
// ===========================================================================

// If you get an error please report on github. You may try different GL context version or GLSL version. See GL<>GLSL version table at the top of this file.
static bool CheckShader(GLuint handle, const char* desc) {
    GLint status = 0, log_length = 0;
    glGetShaderiv(handle, GL_COMPILE_STATUS, &status);
    glGetShaderiv(handle, GL_INFO_LOG_LENGTH, &log_length);
    if ((GLboolean)status == GL_FALSE)
        std::cerr << std::format("ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to compile {}!", desc) << '\n';
    if (log_length > 1) {
        ImVector<char> buf;
        buf.resize((int)(log_length + 1));
        glGetShaderInfoLog(handle, log_length, nullptr, (GLchar*)buf.begin());
        std::cerr << std::format("{}", buf.begin()) << '\n';
    }
    return (GLboolean)status == GL_TRUE;
}

// If you get an error please report on GitHub. You may try different GL context version or GLSL version.
static bool CheckProgram(GLuint handle, const char* desc) {
    GLint status = 0, log_length = 0;
    glGetProgramiv(handle, GL_LINK_STATUS, &status);
    glGetProgramiv(handle, GL_INFO_LOG_LENGTH, &log_length);
    if ((GLboolean)status == GL_FALSE)
        std::cerr << std::format("ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to link {}! (with GLSL '{}')", desc, g_GlslVersionString) << '\n';
    if (log_length > 1) {
        ImVector<char> buf;
        buf.resize((int)(log_length + 1));
        glGetProgramInfoLog(handle, log_length, nullptr, (GLchar*)buf.begin());
        std::cerr << std::format("{}", buf.begin()) << '\n';
    }
    return (GLboolean)status == GL_TRUE;
}

static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_height) {
    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    glDisable(GL_CULL_FACE);
    glDisable(GL_DEPTH_TEST);
    glDisable(GL_STENCIL_TEST);
    glEnable(GL_SCISSOR_TEST);
#ifdef IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART
    if (g_GlVersion >= 310)
        glDisable(GL_PRIMITIVE_RESTART);
#endif
#ifdef GL_POLYGON_MODE
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
#endif

    // Support for GL 4.5 rarely used glClipControl(GL_UPPER_LEFT)
#if defined(GL_CLIP_ORIGIN)
    bool clip_origin_lower_left = true;
    if (g_GlVersion >= 450) {
        GLenum current_clip_origin = 0; glGetIntegerv(GL_CLIP_ORIGIN, (GLint*)&current_clip_origin);
        if (current_clip_origin == GL_UPPER_LEFT)
            clip_origin_lower_left = false;
    }
#endif
    // Setup viewport, orthographic projection matrix
    // Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
    glViewport(0, 0, (GLsizei)fb_width, (GLsizei)fb_height);
    float L = draw_data->DisplayPos.x;
    float R = draw_data->DisplayPos.x + draw_data->DisplaySize.x;
    float T = draw_data->DisplayPos.y;
    float B = draw_data->DisplayPos.y + draw_data->DisplaySize.y;
#if defined(GL_CLIP_ORIGIN)
    if (!clip_origin_lower_left) { float tmp = T; T = B; B = tmp; } // Swap top and bottom if origin is upper left
#endif
    const float ortho_projection[4][4] = { { 2.0f/(R-L),   0.0f,         0.0f,   0.0f }, { 0.0f,         2.0f/(T-B),   0.0f,   0.0f }, { 0.0f,         0.0f,        -1.0f,   0.0f }, { (R+L)/(L-R),  (T+B)/(B-T),  0.0f,   1.0f },
    };
    glUseProgram(g_ShaderHandle);
    glUniformMatrix4fv(g_AttribLocationProjMtx, 1, GL_FALSE, &ortho_projection[0][0]);

#ifdef IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER
    if (g_GlVersion >= 330)
        glBindSampler(0, 0); // We use combined texture/sampler state. Applications using GL 3.3 may set that otherwise.
#endif

    glEnableVertexAttribArray(g_AttribLocationVtxPos);
    glEnableVertexAttribArray(g_AttribLocationVtxUV);
    //glEnableVertexAttribArray(g_AttribLocationVtxColor); //Our shader doesn't use vertex color
    glVertexAttribPointer(g_AttribLocationVtxPos,   2, GL_FLOAT, GL_FALSE, sizeof(ImDrawVert), (GLvoid*)offsetof(ImDrawVert, pos));
    glVertexAttribPointer(g_AttribLocationVtxUV,    2, GL_FLOAT, GL_FALSE, sizeof(ImDrawVert), (GLvoid*)offsetof(ImDrawVert, uv));
    //glVertexAttribPointer(g_AttribLocationVtxColor, 4, GL_UNSIGNED_BYTE, GL_TRUE,  sizeof(ImDrawVert), (GLvoid*)offsetof(ImDrawVert, col));
}

// ===========================================================================
//  END COPIED FROM imgui_impl_opengl3.cpp 
// ---------------------------------------------------------------------------
//  Note that a lot of the following code still orginated in 
//  imgui_impl_opengl3.cpp but there are more changes from here on.
// ===========================================================================

// New uniforms for ImGuiTexInspect fragment shader
static GLint g_UniformLocationTextureSize;
static GLint g_UniformLocationBackgroundColor;
static GLint g_UniformLocationPremultiplyAlpha;
static GLint g_UniformLocationDisableFinalAlpha;
static GLint g_UniformLocationGrid;
static GLint g_UniformLocationMode;
static GLint g_UniformLocationModeData;
static GLint g_UniformLocationCMid;
static GLint g_UniformLocationStokesFilter;
static GLint g_UniformLocationPolarimetric;
static GLint g_UniformLocationPolarimetricMode;


//  Vertex shaders are directly from imgui_impl_opengl3.cpp
const GLchar* vertex_shader_glsl_410_core =
R"(
layout (location = 0) in vec2 Position;
layout (location = 1) in vec2 UV;
layout (location = 2) in vec4 Color;
uniform mat4 ProjMtx;
out vec2 Frag_UV;
out vec4 Frag_Color;
out vec2 Frag_Pos;
void main() {
    Frag_UV = UV;
    Frag_Color = Color;
    Frag_Pos = Position.xy;
    gl_Position = ProjMtx * vec4(Position.xy,0,1);
}
)";


//-------------------------------------------------------------------------
// [SECTION] IMGUI_TEX_INSPECT FRAGMENT SHADERS
//-------------------------------------------------------------------------

const GLchar *fragment_shader_glsl_410_core = 
R"(
vec3 colourmaps[256*6] = {
    // magma
        vec3(0.001462, 0.000466, 0.013866),
        vec3(0.002258, 0.001295, 0.018331),
        vec3(0.003279, 0.002305, 0.023708),
        vec3(0.004512, 0.003490, 0.029965),
        vec3(0.005950, 0.004843, 0.037130),
        vec3(0.007588, 0.006356, 0.044973),
        vec3(0.009426, 0.008022, 0.052844),
        vec3(0.011465, 0.009828, 0.060750),
        vec3(0.013708, 0.011771, 0.068667),
        vec3(0.016156, 0.013840, 0.076603),
        vec3(0.018815, 0.016026, 0.084584),
        vec3(0.021692, 0.018320, 0.092610),
        vec3(0.024792, 0.020715, 0.100676),
        vec3(0.028123, 0.023201, 0.108787),
        vec3(0.031696, 0.025765, 0.116965),
        vec3(0.035520, 0.028397, 0.125209),
        vec3(0.039608, 0.031090, 0.133515),
        vec3(0.043830, 0.033830, 0.141886),
        vec3(0.048062, 0.036607, 0.150327),
        vec3(0.052320, 0.039407, 0.158841),
        vec3(0.056615, 0.042160, 0.167446),
        vec3(0.060949, 0.044794, 0.176129),
        vec3(0.065330, 0.047318, 0.184892),
        vec3(0.069764, 0.049726, 0.193735),
        vec3(0.074257, 0.052017, 0.202660),
        vec3(0.078815, 0.054184, 0.211667),
        vec3(0.083446, 0.056225, 0.220755),
        vec3(0.088155, 0.058133, 0.229922),
        vec3(0.092949, 0.059904, 0.239164),
        vec3(0.097833, 0.061531, 0.248477),
        vec3(0.102815, 0.063010, 0.257854),
        vec3(0.107899, 0.064335, 0.267289),
        vec3(0.113094, 0.065492, 0.276784),
        vec3(0.118405, 0.066479, 0.286321),
        vec3(0.123833, 0.067295, 0.295879),
        vec3(0.129380, 0.067935, 0.305443),
        vec3(0.135053, 0.068391, 0.315000),
        vec3(0.140858, 0.068654, 0.324538),
        vec3(0.146785, 0.068738, 0.334011),
        vec3(0.152839, 0.068637, 0.343404),
        vec3(0.159018, 0.068354, 0.352688),
        vec3(0.165308, 0.067911, 0.361816),
        vec3(0.171713, 0.067305, 0.370771),
        vec3(0.178212, 0.066576, 0.379497),
        vec3(0.184801, 0.065732, 0.387973),
        vec3(0.191460, 0.064818, 0.396152),
        vec3(0.198177, 0.063862, 0.404009),
        vec3(0.204935, 0.062907, 0.411514),
        vec3(0.211718, 0.061992, 0.418647),
        vec3(0.218512, 0.061158, 0.425392),
        vec3(0.225302, 0.060445, 0.431742),
        vec3(0.232077, 0.059889, 0.437695),
        vec3(0.238826, 0.059517, 0.443256),
        vec3(0.245543, 0.059352, 0.448436),
        vec3(0.252220, 0.059415, 0.453248),
        vec3(0.258857, 0.059706, 0.457710),
        vec3(0.265447, 0.060237, 0.461840),
        vec3(0.271994, 0.060994, 0.465660),
        vec3(0.278493, 0.061978, 0.469190),
        vec3(0.284951, 0.063168, 0.472451),
        vec3(0.291366, 0.064553, 0.475462),
        vec3(0.297740, 0.066117, 0.478243),
        vec3(0.304081, 0.067835, 0.480812),
        vec3(0.310382, 0.069702, 0.483186),
        vec3(0.316654, 0.071690, 0.485380),
        vec3(0.322899, 0.073782, 0.487408),
        vec3(0.329114, 0.075972, 0.489287),
        vec3(0.335308, 0.078236, 0.491024),
        vec3(0.341482, 0.080564, 0.492631),
        vec3(0.347636, 0.082946, 0.494121),
        vec3(0.353773, 0.085373, 0.495501),
        vec3(0.359898, 0.087831, 0.496778),
        vec3(0.366012, 0.090314, 0.497960),
        vec3(0.372116, 0.092816, 0.499053),
        vec3(0.378211, 0.095332, 0.500067),
        vec3(0.384299, 0.097855, 0.501002),
        vec3(0.390384, 0.100379, 0.501864),
        vec3(0.396467, 0.102902, 0.502658),
        vec3(0.402548, 0.105420, 0.503386),
        vec3(0.408629, 0.107930, 0.504052),
        vec3(0.414709, 0.110431, 0.504662),
        vec3(0.420791, 0.112920, 0.505215),
        vec3(0.426877, 0.115395, 0.505714),
        vec3(0.432967, 0.117855, 0.506160),
        vec3(0.439062, 0.120298, 0.506555),
        vec3(0.445163, 0.122724, 0.506901),
        vec3(0.451271, 0.125132, 0.507198),
        vec3(0.457386, 0.127522, 0.507448),
        vec3(0.463508, 0.129893, 0.507652),
        vec3(0.469640, 0.132245, 0.507809),
        vec3(0.475780, 0.134577, 0.507921),
        vec3(0.481929, 0.136891, 0.507989),
        vec3(0.488088, 0.139186, 0.508011),
        vec3(0.494258, 0.141462, 0.507988),
        vec3(0.500438, 0.143719, 0.507920),
        vec3(0.506629, 0.145958, 0.507806),
        vec3(0.512831, 0.148179, 0.507648),
        vec3(0.519045, 0.150383, 0.507443),
        vec3(0.525270, 0.152569, 0.507192),
        vec3(0.531507, 0.154739, 0.506895),
        vec3(0.537755, 0.156894, 0.506551),
        vec3(0.544015, 0.159033, 0.506159),
        vec3(0.550287, 0.161158, 0.505719),
        vec3(0.556571, 0.163269, 0.505230),
        vec3(0.562866, 0.165368, 0.504692),
        vec3(0.569172, 0.167454, 0.504105),
        vec3(0.575490, 0.169530, 0.503466),
        vec3(0.581819, 0.171596, 0.502777),
        vec3(0.588158, 0.173652, 0.502035),
        vec3(0.594508, 0.175701, 0.501241),
        vec3(0.600868, 0.177743, 0.500394),
        vec3(0.607238, 0.179779, 0.499492),
        vec3(0.613617, 0.181811, 0.498536),
        vec3(0.620005, 0.183840, 0.497524),
        vec3(0.626401, 0.185867, 0.496456),
        vec3(0.632805, 0.187893, 0.495332),
        vec3(0.639216, 0.189921, 0.494150),
        vec3(0.645633, 0.191952, 0.492910),
        vec3(0.652056, 0.193986, 0.491611),
        vec3(0.658483, 0.196027, 0.490253),
        vec3(0.664915, 0.198075, 0.488836),
        vec3(0.671349, 0.200133, 0.487358),
        vec3(0.677786, 0.202203, 0.485819),
        vec3(0.684224, 0.204286, 0.484219),
        vec3(0.690661, 0.206384, 0.482558),
        vec3(0.697098, 0.208501, 0.480835),
        vec3(0.703532, 0.210638, 0.479049),
        vec3(0.709962, 0.212797, 0.477201),
        vec3(0.716387, 0.214982, 0.475290),
        vec3(0.722805, 0.217194, 0.473316),
        vec3(0.729216, 0.219437, 0.471279),
        vec3(0.735616, 0.221713, 0.469180),
        vec3(0.742004, 0.224025, 0.467018),
        vec3(0.748378, 0.226377, 0.464794),
        vec3(0.754737, 0.228772, 0.462509),
        vec3(0.761077, 0.231214, 0.460162),
        vec3(0.767398, 0.233705, 0.457755),
        vec3(0.773695, 0.236249, 0.455289),
        vec3(0.779968, 0.238851, 0.452765),
        vec3(0.786212, 0.241514, 0.450184),
        vec3(0.792427, 0.244242, 0.447543),
        vec3(0.798608, 0.247040, 0.444848),
        vec3(0.804752, 0.249911, 0.442102),
        vec3(0.810855, 0.252861, 0.439305),
        vec3(0.816914, 0.255895, 0.436461),
        vec3(0.822926, 0.259016, 0.433573),
        vec3(0.828886, 0.262229, 0.430644),
        vec3(0.834791, 0.265540, 0.427671),
        vec3(0.840636, 0.268953, 0.424666),
        vec3(0.846416, 0.272473, 0.421631),
        vec3(0.852126, 0.276106, 0.418573),
        vec3(0.857763, 0.279857, 0.415496),
        vec3(0.863320, 0.283729, 0.412403),
        vec3(0.868793, 0.287728, 0.409303),
        vec3(0.874176, 0.291859, 0.406205),
        vec3(0.879464, 0.296125, 0.403118),
        vec3(0.884651, 0.300530, 0.400047),
        vec3(0.889731, 0.305079, 0.397002),
        vec3(0.894700, 0.309773, 0.393995),
        vec3(0.899552, 0.314616, 0.391037),
        vec3(0.904281, 0.319610, 0.388137),
        vec3(0.908884, 0.324755, 0.385308),
        vec3(0.913354, 0.330052, 0.382563),
        vec3(0.917689, 0.335500, 0.379915),
        vec3(0.921884, 0.341098, 0.377376),
        vec3(0.925937, 0.346844, 0.374959),
        vec3(0.929845, 0.352734, 0.372677),
        vec3(0.933606, 0.358764, 0.370541),
        vec3(0.937221, 0.364929, 0.368567),
        vec3(0.940687, 0.371224, 0.366762),
        vec3(0.944006, 0.377643, 0.365136),
        vec3(0.947180, 0.384178, 0.363701),
        vec3(0.950210, 0.390820, 0.362468),
        vec3(0.953099, 0.397563, 0.361438),
        vec3(0.955849, 0.404400, 0.360619),
        vec3(0.958464, 0.411324, 0.360014),
        vec3(0.960949, 0.418323, 0.359630),
        vec3(0.963310, 0.425390, 0.359469),
        vec3(0.965549, 0.432519, 0.359529),
        vec3(0.967671, 0.439703, 0.359810),
        vec3(0.969680, 0.446936, 0.360311),
        vec3(0.971582, 0.454210, 0.361030),
        vec3(0.973381, 0.461520, 0.361965),
        vec3(0.975082, 0.468861, 0.363111),
        vec3(0.976690, 0.476226, 0.364466),
        vec3(0.978210, 0.483612, 0.366025),
        vec3(0.979645, 0.491014, 0.367783),
        vec3(0.981000, 0.498428, 0.369734),
        vec3(0.982279, 0.505851, 0.371874),
        vec3(0.983485, 0.513280, 0.374198),
        vec3(0.984622, 0.520713, 0.376698),
        vec3(0.985693, 0.528148, 0.379371),
        vec3(0.986700, 0.535582, 0.382210),
        vec3(0.987646, 0.543015, 0.385210),
        vec3(0.988533, 0.550446, 0.388365),
        vec3(0.989363, 0.557873, 0.391671),
        vec3(0.990138, 0.565296, 0.395122),
        vec3(0.990871, 0.572706, 0.398714),
        vec3(0.991558, 0.580107, 0.402441),
        vec3(0.992196, 0.587502, 0.406299),
        vec3(0.992785, 0.594891, 0.410283),
        vec3(0.993326, 0.602275, 0.414390),
        vec3(0.993834, 0.609644, 0.418613),
        vec3(0.994309, 0.616999, 0.422950),
        vec3(0.994738, 0.624350, 0.427397),
        vec3(0.995122, 0.631696, 0.431951),
        vec3(0.995480, 0.639027, 0.436607),
        vec3(0.995810, 0.646344, 0.441361),
        vec3(0.996096, 0.653659, 0.446213),
        vec3(0.996341, 0.660969, 0.451160),
        vec3(0.996580, 0.668256, 0.456192),
        vec3(0.996775, 0.675541, 0.461314),
        vec3(0.996925, 0.682828, 0.466526),
        vec3(0.997077, 0.690088, 0.471811),
        vec3(0.997186, 0.697349, 0.477182),
        vec3(0.997254, 0.704611, 0.482635),
        vec3(0.997325, 0.711848, 0.488154),
        vec3(0.997351, 0.719089, 0.493755),
        vec3(0.997351, 0.726324, 0.499428),
        vec3(0.997341, 0.733545, 0.505167),
        vec3(0.997285, 0.740772, 0.510983),
        vec3(0.997228, 0.747981, 0.516859),
        vec3(0.997138, 0.755190, 0.522806),
        vec3(0.997019, 0.762398, 0.528821),
        vec3(0.996898, 0.769591, 0.534892),
        vec3(0.996727, 0.776795, 0.541039),
        vec3(0.996571, 0.783977, 0.547233),
        vec3(0.996369, 0.791167, 0.553499),
        vec3(0.996162, 0.798348, 0.559820),
        vec3(0.995932, 0.805527, 0.566202),
        vec3(0.995680, 0.812706, 0.572645),
        vec3(0.995424, 0.819875, 0.579140),
        vec3(0.995131, 0.827052, 0.585701),
        vec3(0.994851, 0.834213, 0.592307),
        vec3(0.994524, 0.841387, 0.598983),
        vec3(0.994222, 0.848540, 0.605696),
        vec3(0.993866, 0.855711, 0.612482),
        vec3(0.993545, 0.862859, 0.619299),
        vec3(0.993170, 0.870024, 0.626189),
        vec3(0.992831, 0.877168, 0.633109),
        vec3(0.992440, 0.884330, 0.640099),
        vec3(0.992089, 0.891470, 0.647116),
        vec3(0.991688, 0.898627, 0.654202),
        vec3(0.991332, 0.905763, 0.661309),
        vec3(0.990930, 0.912915, 0.668481),
        vec3(0.990570, 0.920049, 0.675675),
        vec3(0.990175, 0.927196, 0.682926),
        vec3(0.989815, 0.934329, 0.690198),
        vec3(0.989434, 0.941470, 0.697519),
        vec3(0.989077, 0.948604, 0.704863),
        vec3(0.988717, 0.955742, 0.712242),
        vec3(0.988367, 0.962878, 0.719649),
        vec3(0.988033, 0.970012, 0.727077),
        vec3(0.987691, 0.977154, 0.734536),
        vec3(0.987387, 0.984288, 0.742002),
        vec3(0.987053, 0.991438, 0.749504),
        
    // turbo
        vec3(0.18995, 0.07176, 0.23217),
        vec3(0.19483, 0.08339, 0.26149),
        vec3(0.19956, 0.09498, 0.29024),
        vec3(0.20415, 0.10652, 0.31844),
        vec3(0.20860, 0.11802, 0.34607),
        vec3(0.21291, 0.12947, 0.37314),
        vec3(0.21708, 0.14087, 0.39964),
        vec3(0.22111, 0.15223, 0.42558),
        vec3(0.22500, 0.16354, 0.45096),
        vec3(0.22875, 0.17481, 0.47578),
        vec3(0.23236, 0.18603, 0.50004),
        vec3(0.23582, 0.19720, 0.52373),
        vec3(0.23915, 0.20833, 0.54686),
        vec3(0.24234, 0.21941, 0.56942),
        vec3(0.24539, 0.23044, 0.59142),
        vec3(0.24830, 0.24143, 0.61286),
        vec3(0.25107, 0.25237, 0.63374),
        vec3(0.25369, 0.26327, 0.65406),
        vec3(0.25618, 0.27412, 0.67381),
        vec3(0.25853, 0.28492, 0.69300),
        vec3(0.26074, 0.29568, 0.71162),
        vec3(0.26280, 0.30639, 0.72968),
        vec3(0.26473, 0.31706, 0.74718),
        vec3(0.26652, 0.32768, 0.76412),
        vec3(0.26816, 0.33825, 0.78050),
        vec3(0.26967, 0.34878, 0.79631),
        vec3(0.27103, 0.35926, 0.81156),
        vec3(0.27226, 0.36970, 0.82624),
        vec3(0.27334, 0.38008, 0.84037),
        vec3(0.27429, 0.39043, 0.85393),
        vec3(0.27509, 0.40072, 0.86692),
        vec3(0.27576, 0.41097, 0.87936),
        vec3(0.27628, 0.42118, 0.89123),
        vec3(0.27667, 0.43134, 0.90254),
        vec3(0.27691, 0.44145, 0.91328),
        vec3(0.27701, 0.45152, 0.92347),
        vec3(0.27698, 0.46153, 0.93309),
        vec3(0.27680, 0.47151, 0.94214),
        vec3(0.27648, 0.48144, 0.95064),
        vec3(0.27603, 0.49132, 0.95857),
        vec3(0.27543, 0.50115, 0.96594),
        vec3(0.27469, 0.51094, 0.97275),
        vec3(0.27381, 0.52069, 0.97899),
        vec3(0.27273, 0.53040, 0.98461),
        vec3(0.27106, 0.54015, 0.98930),
        vec3(0.26878, 0.54995, 0.99303),
        vec3(0.26592, 0.55979, 0.99583),
        vec3(0.26252, 0.56967, 0.99773),
        vec3(0.25862, 0.57958, 0.99876),
        vec3(0.25425, 0.58950, 0.99896),
        vec3(0.24946, 0.59943, 0.99835),
        vec3(0.24427, 0.60937, 0.99697),
        vec3(0.23874, 0.61931, 0.99485),
        vec3(0.23288, 0.62923, 0.99202),
        vec3(0.22676, 0.63913, 0.98851),
        vec3(0.22039, 0.64901, 0.98436),
        vec3(0.21382, 0.65886, 0.97959),
        vec3(0.20708, 0.66866, 0.97423),
        vec3(0.20021, 0.67842, 0.96833),
        vec3(0.19326, 0.68812, 0.96190),
        vec3(0.18625, 0.69775, 0.95498),
        vec3(0.17923, 0.70732, 0.94761),
        vec3(0.17223, 0.71680, 0.93981),
        vec3(0.16529, 0.72620, 0.93161),
        vec3(0.15844, 0.73551, 0.92305),
        vec3(0.15173, 0.74472, 0.91416),
        vec3(0.14519, 0.75381, 0.90496),
        vec3(0.13886, 0.76279, 0.89550),
        vec3(0.13278, 0.77165, 0.88580),
        vec3(0.12698, 0.78037, 0.87590),
        vec3(0.12151, 0.78896, 0.86581),
        vec3(0.11639, 0.79740, 0.85559),
        vec3(0.11167, 0.80569, 0.84525),
        vec3(0.10738, 0.81381, 0.83484),
        vec3(0.10357, 0.82177, 0.82437),
        vec3(0.10026, 0.82955, 0.81389),
        vec3(0.09750, 0.83714, 0.80342),
        vec3(0.09532, 0.84455, 0.79299),
        vec3(0.09377, 0.85175, 0.78264),
        vec3(0.09287, 0.85875, 0.77240),
        vec3(0.09267, 0.86554, 0.76230),
        vec3(0.09320, 0.87211, 0.75237),
        vec3(0.09451, 0.87844, 0.74265),
        vec3(0.09662, 0.88454, 0.73316),
        vec3(0.09958, 0.89040, 0.72393),
        vec3(0.10342, 0.89600, 0.71500),
        vec3(0.10815, 0.90142, 0.70599),
        vec3(0.11374, 0.90673, 0.69651),
        vec3(0.12014, 0.91193, 0.68660),
        vec3(0.12733, 0.91701, 0.67627),
        vec3(0.13526, 0.92197, 0.66556),
        vec3(0.14391, 0.92680, 0.65448),
        vec3(0.15323, 0.93151, 0.64308),
        vec3(0.16319, 0.93609, 0.63137),
        vec3(0.17377, 0.94053, 0.61938),
        vec3(0.18491, 0.94484, 0.60713),
        vec3(0.19659, 0.94901, 0.59466),
        vec3(0.20877, 0.95304, 0.58199),
        vec3(0.22142, 0.95692, 0.56914),
        vec3(0.23449, 0.96065, 0.55614),
        vec3(0.24797, 0.96423, 0.54303),
        vec3(0.26180, 0.96765, 0.52981),
        vec3(0.27597, 0.97092, 0.51653),
        vec3(0.29042, 0.97403, 0.50321),
        vec3(0.30513, 0.97697, 0.48987),
        vec3(0.32006, 0.97974, 0.47654),
        vec3(0.33517, 0.98234, 0.46325),
        vec3(0.35043, 0.98477, 0.45002),
        vec3(0.36581, 0.98702, 0.43688),
        vec3(0.38127, 0.98909, 0.42386),
        vec3(0.39678, 0.99098, 0.41098),
        vec3(0.41229, 0.99268, 0.39826),
        vec3(0.42778, 0.99419, 0.38575),
        vec3(0.44321, 0.99551, 0.37345),
        vec3(0.45854, 0.99663, 0.36140),
        vec3(0.47375, 0.99755, 0.34963),
        vec3(0.48879, 0.99828, 0.33816),
        vec3(0.50362, 0.99879, 0.32701),
        vec3(0.51822, 0.99910, 0.31622),
        vec3(0.53255, 0.99919, 0.30581),
        vec3(0.54658, 0.99907, 0.29581),
        vec3(0.56026, 0.99873, 0.28623),
        vec3(0.57357, 0.99817, 0.27712),
        vec3(0.58646, 0.99739, 0.26849),
        vec3(0.59891, 0.99638, 0.26038),
        vec3(0.61088, 0.99514, 0.25280),
        vec3(0.62233, 0.99366, 0.24579),
        vec3(0.63323, 0.99195, 0.23937),
        vec3(0.64362, 0.98999, 0.23356),
        vec3(0.65394, 0.98775, 0.22835),
        vec3(0.66428, 0.98524, 0.22370),
        vec3(0.67462, 0.98246, 0.21960),
        vec3(0.68494, 0.97941, 0.21602),
        vec3(0.69525, 0.97610, 0.21294),
        vec3(0.70553, 0.97255, 0.21032),
        vec3(0.71577, 0.96875, 0.20815),
        vec3(0.72596, 0.96470, 0.20640),
        vec3(0.73610, 0.96043, 0.20504),
        vec3(0.74617, 0.95593, 0.20406),
        vec3(0.75617, 0.95121, 0.20343),
        vec3(0.76608, 0.94627, 0.20311),
        vec3(0.77591, 0.94113, 0.20310),
        vec3(0.78563, 0.93579, 0.20336),
        vec3(0.79524, 0.93025, 0.20386),
        vec3(0.80473, 0.92452, 0.20459),
        vec3(0.81410, 0.91861, 0.20552),
        vec3(0.82333, 0.91253, 0.20663),
        vec3(0.83241, 0.90627, 0.20788),
        vec3(0.84133, 0.89986, 0.20926),
        vec3(0.85010, 0.89328, 0.21074),
        vec3(0.85868, 0.88655, 0.21230),
        vec3(0.86709, 0.87968, 0.21391),
        vec3(0.87530, 0.87267, 0.21555),
        vec3(0.88331, 0.86553, 0.21719),
        vec3(0.89112, 0.85826, 0.21880),
        vec3(0.89870, 0.85087, 0.22038),
        vec3(0.90605, 0.84337, 0.22188),
        vec3(0.91317, 0.83576, 0.22328),
        vec3(0.92004, 0.82806, 0.22456),
        vec3(0.92666, 0.82025, 0.22570),
        vec3(0.93301, 0.81236, 0.22667),
        vec3(0.93909, 0.80439, 0.22744),
        vec3(0.94489, 0.79634, 0.22800),
        vec3(0.95039, 0.78823, 0.22831),
        vec3(0.95560, 0.78005, 0.22836),
        vec3(0.96049, 0.77181, 0.22811),
        vec3(0.96507, 0.76352, 0.22754),
        vec3(0.96931, 0.75519, 0.22663),
        vec3(0.97323, 0.74682, 0.22536),
        vec3(0.97679, 0.73842, 0.22369),
        vec3(0.98000, 0.73000, 0.22161),
        vec3(0.98289, 0.72140, 0.21918),
        vec3(0.98549, 0.71250, 0.21650),
        vec3(0.98781, 0.70330, 0.21358),
        vec3(0.98986, 0.69382, 0.21043),
        vec3(0.99163, 0.68408, 0.20706),
        vec3(0.99314, 0.67408, 0.20348),
        vec3(0.99438, 0.66386, 0.19971),
        vec3(0.99535, 0.65341, 0.19577),
        vec3(0.99607, 0.64277, 0.19165),
        vec3(0.99654, 0.63193, 0.18738),
        vec3(0.99675, 0.62093, 0.18297),
        vec3(0.99672, 0.60977, 0.17842),
        vec3(0.99644, 0.59846, 0.17376),
        vec3(0.99593, 0.58703, 0.16899),
        vec3(0.99517, 0.57549, 0.16412),
        vec3(0.99419, 0.56386, 0.15918),
        vec3(0.99297, 0.55214, 0.15417),
        vec3(0.99153, 0.54036, 0.14910),
        vec3(0.98987, 0.52854, 0.14398),
        vec3(0.98799, 0.51667, 0.13883),
        vec3(0.98590, 0.50479, 0.13367),
        vec3(0.98360, 0.49291, 0.12849),
        vec3(0.98108, 0.48104, 0.12332),
        vec3(0.97837, 0.46920, 0.11817),
        vec3(0.97545, 0.45740, 0.11305),
        vec3(0.97234, 0.44565, 0.10797),
        vec3(0.96904, 0.43399, 0.10294),
        vec3(0.96555, 0.42241, 0.09798),
        vec3(0.96187, 0.41093, 0.09310),
        vec3(0.95801, 0.39958, 0.08831),
        vec3(0.95398, 0.38836, 0.08362),
        vec3(0.94977, 0.37729, 0.07905),
        vec3(0.94538, 0.36638, 0.07461),
        vec3(0.94084, 0.35566, 0.07031),
        vec3(0.93612, 0.34513, 0.06616),
        vec3(0.93125, 0.33482, 0.06218),
        vec3(0.92623, 0.32473, 0.05837),
        vec3(0.92105, 0.31489, 0.05475),
        vec3(0.91572, 0.30530, 0.05134),
        vec3(0.91024, 0.29599, 0.04814),
        vec3(0.90463, 0.28696, 0.04516),
        vec3(0.89888, 0.27824, 0.04243),
        vec3(0.89298, 0.26981, 0.03993),
        vec3(0.88691, 0.26152, 0.03753),
        vec3(0.88066, 0.25334, 0.03521),
        vec3(0.87422, 0.24526, 0.03297),
        vec3(0.86760, 0.23730, 0.03082),
        vec3(0.86079, 0.22945, 0.02875),
        vec3(0.85380, 0.22170, 0.02677),
        vec3(0.84662, 0.21407, 0.02487),
        vec3(0.83926, 0.20654, 0.02305),
        vec3(0.83172, 0.19912, 0.02131),
        vec3(0.82399, 0.19182, 0.01966),
        vec3(0.81608, 0.18462, 0.01809),
        vec3(0.80799, 0.17753, 0.01660),
        vec3(0.79971, 0.17055, 0.01520),
        vec3(0.79125, 0.16368, 0.01387),
        vec3(0.78260, 0.15693, 0.01264),
        vec3(0.77377, 0.15028, 0.01148),
        vec3(0.76476, 0.14374, 0.01041),
        vec3(0.75556, 0.13731, 0.00942),
        vec3(0.74617, 0.13098, 0.00851),
        vec3(0.73661, 0.12477, 0.00769),
        vec3(0.72686, 0.11867, 0.00695),
        vec3(0.71692, 0.11268, 0.00629),
        vec3(0.70680, 0.10680, 0.00571),
        vec3(0.69650, 0.10102, 0.00522),
        vec3(0.68602, 0.09536, 0.00481),
        vec3(0.67535, 0.08980, 0.00449),
        vec3(0.66449, 0.08436, 0.00424),
        vec3(0.65345, 0.07902, 0.00408),
        vec3(0.64223, 0.07380, 0.00401),
        vec3(0.63082, 0.06868, 0.00401),
        vec3(0.61923, 0.06367, 0.00410),
        vec3(0.60746, 0.05878, 0.00427),
        vec3(0.59550, 0.05399, 0.00453),
        vec3(0.58336, 0.04931, 0.00486),
        vec3(0.57103, 0.04474, 0.00529),
        vec3(0.55852, 0.04028, 0.00579),
        vec3(0.54583, 0.03593, 0.00638),
        vec3(0.53295, 0.03169, 0.00705),
        vec3(0.51989, 0.02756, 0.00780),
        vec3(0.50664, 0.02354, 0.00863),
        vec3(0.49321, 0.01963, 0.00955),
        vec3(0.47960, 0.01583, 0.01055),

    // inferno
        vec3(0.001462, 0.000466, 0.013866),
        vec3(0.002267, 0.001270, 0.018570),
        vec3(0.003299, 0.002249, 0.024239),
        vec3(0.004547, 0.003392, 0.030909),
        vec3(0.006006, 0.004692, 0.038558),
        vec3(0.007676, 0.006136, 0.046836),
        vec3(0.009561, 0.007713, 0.055143),
        vec3(0.011663, 0.009417, 0.063460),
        vec3(0.013995, 0.011225, 0.071862),
        vec3(0.016561, 0.013136, 0.080282),
        vec3(0.019373, 0.015133, 0.088767),
        vec3(0.022447, 0.017199, 0.097327),
        vec3(0.025793, 0.019331, 0.105930),
        vec3(0.029432, 0.021503, 0.114621),
        vec3(0.033385, 0.023702, 0.123397),
        vec3(0.037668, 0.025921, 0.132232),
        vec3(0.042253, 0.028139, 0.141141),
        vec3(0.046915, 0.030324, 0.150164),
        vec3(0.051644, 0.032474, 0.159254),
        vec3(0.056449, 0.034569, 0.168414),
        vec3(0.061340, 0.036590, 0.177642),
        vec3(0.066331, 0.038504, 0.186962),
        vec3(0.071429, 0.040294, 0.196354),
        vec3(0.076637, 0.041905, 0.205799),
        vec3(0.081962, 0.043328, 0.215289),
        vec3(0.087411, 0.044556, 0.224813),
        vec3(0.092990, 0.045583, 0.234358),
        vec3(0.098702, 0.046402, 0.243904),
        vec3(0.104551, 0.047008, 0.253430),
        vec3(0.110536, 0.047399, 0.262912),
        vec3(0.116656, 0.047574, 0.272321),
        vec3(0.122908, 0.047536, 0.281624),
        vec3(0.129285, 0.047293, 0.290788),
        vec3(0.135778, 0.046856, 0.299776),
        vec3(0.142378, 0.046242, 0.308553),
        vec3(0.149073, 0.045468, 0.317085),
        vec3(0.155850, 0.044559, 0.325338),
        vec3(0.162689, 0.043554, 0.333277),
        vec3(0.169575, 0.042489, 0.340874),
        vec3(0.176493, 0.041402, 0.348111),
        vec3(0.183429, 0.040329, 0.354971),
        vec3(0.190367, 0.039309, 0.361447),
        vec3(0.197297, 0.038400, 0.367535),
        vec3(0.204209, 0.037632, 0.373238),
        vec3(0.211095, 0.037030, 0.378563),
        vec3(0.217949, 0.036615, 0.383522),
        vec3(0.224763, 0.036405, 0.388129),
        vec3(0.231538, 0.036405, 0.392400),
        vec3(0.238273, 0.036621, 0.396353),
        vec3(0.244967, 0.037055, 0.400007),
        vec3(0.251620, 0.037705, 0.403378),
        vec3(0.258234, 0.038571, 0.406485),
        vec3(0.264810, 0.039647, 0.409345),
        vec3(0.271347, 0.040922, 0.411976),
        vec3(0.277850, 0.042353, 0.414392),
        vec3(0.284321, 0.043933, 0.416608),
        vec3(0.290763, 0.045644, 0.418637),
        vec3(0.297178, 0.047470, 0.420491),
        vec3(0.303568, 0.049396, 0.422182),
        vec3(0.309935, 0.051407, 0.423721),
        vec3(0.316282, 0.053490, 0.425116),
        vec3(0.322610, 0.055634, 0.426377),
        vec3(0.328921, 0.057827, 0.427511),
        vec3(0.335217, 0.060060, 0.428524),
        vec3(0.341500, 0.062325, 0.429425),
        vec3(0.347771, 0.064616, 0.430217),
        vec3(0.354032, 0.066925, 0.430906),
        vec3(0.360284, 0.069247, 0.431497),
        vec3(0.366529, 0.071579, 0.431994),
        vec3(0.372768, 0.073915, 0.432400),
        vec3(0.379001, 0.076253, 0.432719),
        vec3(0.385228, 0.078591, 0.432955),
        vec3(0.391453, 0.080927, 0.433109),
        vec3(0.397674, 0.083257, 0.433183),
        vec3(0.403894, 0.085580, 0.433179),
        vec3(0.410113, 0.087896, 0.433098),
        vec3(0.416331, 0.090203, 0.432943),
        vec3(0.422549, 0.092501, 0.432714),
        vec3(0.428768, 0.094790, 0.432412),
        vec3(0.434987, 0.097069, 0.432039),
        vec3(0.441207, 0.099338, 0.431594),
        vec3(0.447428, 0.101597, 0.431080),
        vec3(0.453651, 0.103848, 0.430498),
        vec3(0.459875, 0.106089, 0.429846),
        vec3(0.466100, 0.108322, 0.429125),
        vec3(0.472328, 0.110547, 0.428334),
        vec3(0.478558, 0.112764, 0.427475),
        vec3(0.484789, 0.114974, 0.426548),
        vec3(0.491022, 0.117179, 0.425552),
        vec3(0.497257, 0.119379, 0.424488),
        vec3(0.503493, 0.121575, 0.423356),
        vec3(0.509730, 0.123769, 0.422156),
        vec3(0.515967, 0.125960, 0.420887),
        vec3(0.522206, 0.128150, 0.419549),
        vec3(0.528444, 0.130341, 0.418142),
        vec3(0.534683, 0.132534, 0.416667),
        vec3(0.540920, 0.134729, 0.415123),
        vec3(0.547157, 0.136929, 0.413511),
        vec3(0.553392, 0.139134, 0.411829),
        vec3(0.559624, 0.141346, 0.410078),
        vec3(0.565854, 0.143567, 0.408258),
        vec3(0.572081, 0.145797, 0.406369),
        vec3(0.578304, 0.148039, 0.404411),
        vec3(0.584521, 0.150294, 0.402385),
        vec3(0.590734, 0.152563, 0.400290),
        vec3(0.596940, 0.154848, 0.398125),
        vec3(0.603139, 0.157151, 0.395891),
        vec3(0.609330, 0.159474, 0.393589),
        vec3(0.615513, 0.161817, 0.391219),
        vec3(0.621685, 0.164184, 0.388781),
        vec3(0.627847, 0.166575, 0.386276),
        vec3(0.633998, 0.168992, 0.383704),
        vec3(0.640135, 0.171438, 0.381065),
        vec3(0.646260, 0.173914, 0.378359),
        vec3(0.652369, 0.176421, 0.375586),
        vec3(0.658463, 0.178962, 0.372748),
        vec3(0.664540, 0.181539, 0.369846),
        vec3(0.670599, 0.184153, 0.366879),
        vec3(0.676638, 0.186807, 0.363849),
        vec3(0.682656, 0.189501, 0.360757),
        vec3(0.688653, 0.192239, 0.357603),
        vec3(0.694627, 0.195021, 0.354388),
        vec3(0.700576, 0.197851, 0.351113),
        vec3(0.706500, 0.200728, 0.347777),
        vec3(0.712396, 0.203656, 0.344383),
        vec3(0.718264, 0.206636, 0.340931),
        vec3(0.724103, 0.209670, 0.337424),
        vec3(0.729909, 0.212759, 0.333861),
        vec3(0.735683, 0.215906, 0.330245),
        vec3(0.741423, 0.219112, 0.326576),
        vec3(0.747127, 0.222378, 0.322856),
        vec3(0.752794, 0.225706, 0.319085),
        vec3(0.758422, 0.229097, 0.315266),
        vec3(0.764010, 0.232554, 0.311399),
        vec3(0.769556, 0.236077, 0.307485),
        vec3(0.775059, 0.239667, 0.303526),
        vec3(0.780517, 0.243327, 0.299523),
        vec3(0.785929, 0.247056, 0.295477),
        vec3(0.791293, 0.250856, 0.291390),
        vec3(0.796607, 0.254728, 0.287264),
        vec3(0.801871, 0.258674, 0.283099),
        vec3(0.807082, 0.262692, 0.278898),
        vec3(0.812239, 0.266786, 0.274661),
        vec3(0.817341, 0.270954, 0.270390),
        vec3(0.822386, 0.275197, 0.266085),
        vec3(0.827372, 0.279517, 0.261750),
        vec3(0.832299, 0.283913, 0.257383),
        vec3(0.837165, 0.288385, 0.252988),
        vec3(0.841969, 0.292933, 0.248564),
        vec3(0.846709, 0.297559, 0.244113),
        vec3(0.851384, 0.302260, 0.239636),
        vec3(0.855992, 0.307038, 0.235133),
        vec3(0.860533, 0.311892, 0.230606),
        vec3(0.865006, 0.316822, 0.226055),
        vec3(0.869409, 0.321827, 0.221482),
        vec3(0.873741, 0.326906, 0.216886),
        vec3(0.878001, 0.332060, 0.212268),
        vec3(0.882188, 0.337287, 0.207628),
        vec3(0.886302, 0.342586, 0.202968),
        vec3(0.890341, 0.347957, 0.198286),
        vec3(0.894305, 0.353399, 0.193584),
        vec3(0.898192, 0.358911, 0.188860),
        vec3(0.902003, 0.364492, 0.184116),
        vec3(0.905735, 0.370140, 0.179350),
        vec3(0.909390, 0.375856, 0.174563),
        vec3(0.912966, 0.381636, 0.169755),
        vec3(0.916462, 0.387481, 0.164924),
        vec3(0.919879, 0.393389, 0.160070),
        vec3(0.923215, 0.399359, 0.155193),
        vec3(0.926470, 0.405389, 0.150292),
        vec3(0.929644, 0.411479, 0.145367),
        vec3(0.932737, 0.417627, 0.140417),
        vec3(0.935747, 0.423831, 0.135440),
        vec3(0.938675, 0.430091, 0.130438),
        vec3(0.941521, 0.436405, 0.125409),
        vec3(0.944285, 0.442772, 0.120354),
        vec3(0.946965, 0.449191, 0.115272),
        vec3(0.949562, 0.455660, 0.110164),
        vec3(0.952075, 0.462178, 0.105031),
        vec3(0.954506, 0.468744, 0.099874),
        vec3(0.956852, 0.475356, 0.094695),
        vec3(0.959114, 0.482014, 0.089499),
        vec3(0.961293, 0.488716, 0.084289),
        vec3(0.963387, 0.495462, 0.079073),
        vec3(0.965397, 0.502249, 0.073859),
        vec3(0.967322, 0.509078, 0.068659),
        vec3(0.969163, 0.515946, 0.063488),
        vec3(0.970919, 0.522853, 0.058367),
        vec3(0.972590, 0.529798, 0.053324),
        vec3(0.974176, 0.536780, 0.048392),
        vec3(0.975677, 0.543798, 0.043618),
        vec3(0.977092, 0.550850, 0.039050),
        vec3(0.978422, 0.557937, 0.034931),
        vec3(0.979666, 0.565057, 0.031409),
        vec3(0.980824, 0.572209, 0.028508),
        vec3(0.981895, 0.579392, 0.026250),
        vec3(0.982881, 0.586606, 0.024661),
        vec3(0.983779, 0.593849, 0.023770),
        vec3(0.984591, 0.601122, 0.023606),
        vec3(0.985315, 0.608422, 0.024202),
        vec3(0.985952, 0.615750, 0.025592),
        vec3(0.986502, 0.623105, 0.027814),
        vec3(0.986964, 0.630485, 0.030908),
        vec3(0.987337, 0.637890, 0.034916),
        vec3(0.987622, 0.645320, 0.039886),
        vec3(0.987819, 0.652773, 0.045581),
        vec3(0.987926, 0.660250, 0.051750),
        vec3(0.987945, 0.667748, 0.058329),
        vec3(0.987874, 0.675267, 0.065257),
        vec3(0.987714, 0.682807, 0.072489),
        vec3(0.987464, 0.690366, 0.079990),
        vec3(0.987124, 0.697944, 0.087731),
        vec3(0.986694, 0.705540, 0.095694),
        vec3(0.986175, 0.713153, 0.103863),
        vec3(0.985566, 0.720782, 0.112229),
        vec3(0.984865, 0.728427, 0.120785),
        vec3(0.984075, 0.736087, 0.129527),
        vec3(0.983196, 0.743758, 0.138453),
        vec3(0.982228, 0.751442, 0.147565),
        vec3(0.981173, 0.759135, 0.156863),
        vec3(0.980032, 0.766837, 0.166353),
        vec3(0.978806, 0.774545, 0.176037),
        vec3(0.977497, 0.782258, 0.185923),
        vec3(0.976108, 0.789974, 0.196018),
        vec3(0.974638, 0.797692, 0.206332),
        vec3(0.973088, 0.805409, 0.216877),
        vec3(0.971468, 0.813122, 0.227658),
        vec3(0.969783, 0.820825, 0.238686),
        vec3(0.968041, 0.828515, 0.249972),
        vec3(0.966243, 0.836191, 0.261534),
        vec3(0.964394, 0.843848, 0.273391),
        vec3(0.962517, 0.851476, 0.285546),
        vec3(0.960626, 0.859069, 0.298010),
        vec3(0.958720, 0.866624, 0.310820),
        vec3(0.956834, 0.874129, 0.323974),
        vec3(0.954997, 0.881569, 0.337475),
        vec3(0.953215, 0.888942, 0.351369),
        vec3(0.951546, 0.896226, 0.365627),
        vec3(0.950018, 0.903409, 0.380271),
        vec3(0.948683, 0.910473, 0.395289),
        vec3(0.947594, 0.917399, 0.410665),
        vec3(0.946809, 0.924168, 0.426373),
        vec3(0.946392, 0.930761, 0.442367),
        vec3(0.946403, 0.937159, 0.458592),
        vec3(0.946903, 0.943348, 0.474970),
        vec3(0.947937, 0.949318, 0.491426),
        vec3(0.949545, 0.955063, 0.507860),
        vec3(0.951740, 0.960587, 0.524203),
        vec3(0.954529, 0.965896, 0.540361),
        vec3(0.957896, 0.971003, 0.556275),
        vec3(0.961812, 0.975924, 0.571925),
        vec3(0.966249, 0.980678, 0.587206),
        vec3(0.971162, 0.985282, 0.602154),
        vec3(0.976511, 0.989753, 0.616760),
        vec3(0.982257, 0.994109, 0.631017),
        vec3(0.988362, 0.998364, 0.644924),

    // plasma
        vec3(0.050383, 0.029803, 0.527975),
        vec3(0.063536, 0.028426, 0.533124),
        vec3(0.075353, 0.027206, 0.538007),
        vec3(0.086222, 0.026125, 0.542658),
        vec3(0.096379, 0.025165, 0.547103),
        vec3(0.105980, 0.024309, 0.551368),
        vec3(0.115124, 0.023556, 0.555468),
        vec3(0.123903, 0.022878, 0.559423),
        vec3(0.132381, 0.022258, 0.563250),
        vec3(0.140603, 0.021687, 0.566959),
        vec3(0.148607, 0.021154, 0.570562),
        vec3(0.156421, 0.020651, 0.574065),
        vec3(0.164070, 0.020171, 0.577478),
        vec3(0.171574, 0.019706, 0.580806),
        vec3(0.178950, 0.019252, 0.584054),
        vec3(0.186213, 0.018803, 0.587228),
        vec3(0.193374, 0.018354, 0.590330),
        vec3(0.200445, 0.017902, 0.593364),
        vec3(0.207435, 0.017442, 0.596333),
        vec3(0.214350, 0.016973, 0.599239),
        vec3(0.221197, 0.016497, 0.602083),
        vec3(0.227983, 0.016007, 0.604867),
        vec3(0.234715, 0.015502, 0.607592),
        vec3(0.241396, 0.014979, 0.610259),
        vec3(0.248032, 0.014439, 0.612868),
        vec3(0.254627, 0.013882, 0.615419),
        vec3(0.261183, 0.013308, 0.617911),
        vec3(0.267703, 0.012716, 0.620346),
        vec3(0.274191, 0.012109, 0.622722),
        vec3(0.280648, 0.011488, 0.625038),
        vec3(0.287076, 0.010855, 0.627295),
        vec3(0.293478, 0.010213, 0.629490),
        vec3(0.299855, 0.009561, 0.631624),
        vec3(0.306210, 0.008902, 0.633694),
        vec3(0.312543, 0.008239, 0.635700),
        vec3(0.318856, 0.007576, 0.637640),
        vec3(0.325150, 0.006915, 0.639512),
        vec3(0.331426, 0.006261, 0.641316),
        vec3(0.337683, 0.005618, 0.643049),
        vec3(0.343925, 0.004991, 0.644710),
        vec3(0.350150, 0.004382, 0.646298),
        vec3(0.356359, 0.003798, 0.647810),
        vec3(0.362553, 0.003243, 0.649245),
        vec3(0.368733, 0.002724, 0.650601),
        vec3(0.374897, 0.002245, 0.651876),
        vec3(0.381047, 0.001814, 0.653068),
        vec3(0.387183, 0.001434, 0.654177),
        vec3(0.393304, 0.001114, 0.655199),
        vec3(0.399411, 0.000859, 0.656133),
        vec3(0.405503, 0.000678, 0.656977),
        vec3(0.411580, 0.000577, 0.657730),
        vec3(0.417642, 0.000564, 0.658390),
        vec3(0.423689, 0.000646, 0.658956),
        vec3(0.429719, 0.000831, 0.659425),
        vec3(0.435734, 0.001127, 0.659797),
        vec3(0.441732, 0.001540, 0.660069),
        vec3(0.447714, 0.002080, 0.660240),
        vec3(0.453677, 0.002755, 0.660310),
        vec3(0.459623, 0.003574, 0.660277),
        vec3(0.465550, 0.004545, 0.660139),
        vec3(0.471457, 0.005678, 0.659897),
        vec3(0.477344, 0.006980, 0.659549),
        vec3(0.483210, 0.008460, 0.659095),
        vec3(0.489055, 0.010127, 0.658534),
        vec3(0.494877, 0.011990, 0.657865),
        vec3(0.500678, 0.014055, 0.657088),
        vec3(0.506454, 0.016333, 0.656202),
        vec3(0.512206, 0.018833, 0.655209),
        vec3(0.517933, 0.021563, 0.654109),
        vec3(0.523633, 0.024532, 0.652901),
        vec3(0.529306, 0.027747, 0.651586),
        vec3(0.534952, 0.031217, 0.650165),
        vec3(0.540570, 0.034950, 0.648640),
        vec3(0.546157, 0.038954, 0.647010),
        vec3(0.551715, 0.043136, 0.645277),
        vec3(0.557243, 0.047331, 0.643443),
        vec3(0.562738, 0.051545, 0.641509),
        vec3(0.568201, 0.055778, 0.639477),
        vec3(0.573632, 0.060028, 0.637349),
        vec3(0.579029, 0.064296, 0.635126),
        vec3(0.584391, 0.068579, 0.632812),
        vec3(0.589719, 0.072878, 0.630408),
        vec3(0.595011, 0.077190, 0.627917),
        vec3(0.600266, 0.081516, 0.625342),
        vec3(0.605485, 0.085854, 0.622686),
        vec3(0.610667, 0.090204, 0.619951),
        vec3(0.615812, 0.094564, 0.617140),
        vec3(0.620919, 0.098934, 0.614257),
        vec3(0.625987, 0.103312, 0.611305),
        vec3(0.631017, 0.107699, 0.608287),
        vec3(0.636008, 0.112092, 0.605205),
        vec3(0.640959, 0.116492, 0.602065),
        vec3(0.645872, 0.120898, 0.598867),
        vec3(0.650746, 0.125309, 0.595617),
        vec3(0.655580, 0.129725, 0.592317),
        vec3(0.660374, 0.134144, 0.588971),
        vec3(0.665129, 0.138566, 0.585582),
        vec3(0.669845, 0.142992, 0.582154),
        vec3(0.674522, 0.147419, 0.578688),
        vec3(0.679160, 0.151848, 0.575189),
        vec3(0.683758, 0.156278, 0.571660),
        vec3(0.688318, 0.160709, 0.568103),
        vec3(0.692840, 0.165141, 0.564522),
        vec3(0.697324, 0.169573, 0.560919),
        vec3(0.701769, 0.174005, 0.557296),
        vec3(0.706178, 0.178437, 0.553657),
        vec3(0.710549, 0.182868, 0.550004),
        vec3(0.714883, 0.187299, 0.546338),
        vec3(0.719181, 0.191729, 0.542663),
        vec3(0.723444, 0.196158, 0.538981),
        vec3(0.727670, 0.200586, 0.535293),
        vec3(0.731862, 0.205013, 0.531601),
        vec3(0.736019, 0.209439, 0.527908),
        vec3(0.740143, 0.213864, 0.524216),
        vec3(0.744232, 0.218288, 0.520524),
        vec3(0.748289, 0.222711, 0.516834),
        vec3(0.752312, 0.227133, 0.513149),
        vec3(0.756304, 0.231555, 0.509468),
        vec3(0.760264, 0.235976, 0.505794),
        vec3(0.764193, 0.240396, 0.502126),
        vec3(0.768090, 0.244817, 0.498465),
        vec3(0.771958, 0.249237, 0.494813),
        vec3(0.775796, 0.253658, 0.491171),
        vec3(0.779604, 0.258078, 0.487539),
        vec3(0.783383, 0.262500, 0.483918),
        vec3(0.787133, 0.266922, 0.480307),
        vec3(0.790855, 0.271345, 0.476706),
        vec3(0.794549, 0.275770, 0.473117),
        vec3(0.798216, 0.280197, 0.469538),
        vec3(0.801855, 0.284626, 0.465971),
        vec3(0.805467, 0.289057, 0.462415),
        vec3(0.809052, 0.293491, 0.458870),
        vec3(0.812612, 0.297928, 0.455338),
        vec3(0.816144, 0.302368, 0.451816),
        vec3(0.819651, 0.306812, 0.448306),
        vec3(0.823132, 0.311261, 0.444806),
        vec3(0.826588, 0.315714, 0.441316),
        vec3(0.830018, 0.320172, 0.437836),
        vec3(0.833422, 0.324635, 0.434366),
        vec3(0.836801, 0.329105, 0.430905),
        vec3(0.840155, 0.333580, 0.427455),
        vec3(0.843484, 0.338062, 0.424013),
        vec3(0.846788, 0.342551, 0.420579),
        vec3(0.850066, 0.347048, 0.417153),
        vec3(0.853319, 0.351553, 0.413734),
        vec3(0.856547, 0.356066, 0.410322),
        vec3(0.859750, 0.360588, 0.406917),
        vec3(0.862927, 0.365119, 0.403519),
        vec3(0.866078, 0.369660, 0.400126),
        vec3(0.869203, 0.374212, 0.396738),
        vec3(0.872303, 0.378774, 0.393355),
        vec3(0.875376, 0.383347, 0.389976),
        vec3(0.878423, 0.387932, 0.386600),
        vec3(0.881443, 0.392529, 0.383229),
        vec3(0.884436, 0.397139, 0.379860),
        vec3(0.887402, 0.401762, 0.376494),
        vec3(0.890340, 0.406398, 0.373130),
        vec3(0.893250, 0.411048, 0.369768),
        vec3(0.896131, 0.415712, 0.366407),
        vec3(0.898984, 0.420392, 0.363047),
        vec3(0.901807, 0.425087, 0.359688),
        vec3(0.904601, 0.429797, 0.356329),
        vec3(0.907365, 0.434524, 0.352970),
        vec3(0.910098, 0.439268, 0.349610),
        vec3(0.912800, 0.444029, 0.346251),
        vec3(0.915471, 0.448807, 0.342890),
        vec3(0.918109, 0.453603, 0.339529),
        vec3(0.920714, 0.458417, 0.336166),
        vec3(0.923287, 0.463251, 0.332801),
        vec3(0.925825, 0.468103, 0.329435),
        vec3(0.928329, 0.472975, 0.326067),
        vec3(0.930798, 0.477867, 0.322697),
        vec3(0.933232, 0.482780, 0.319325),
        vec3(0.935630, 0.487712, 0.315952),
        vec3(0.937990, 0.492667, 0.312575),
        vec3(0.940313, 0.497642, 0.309197),
        vec3(0.942598, 0.502639, 0.305816),
        vec3(0.944844, 0.507658, 0.302433),
        vec3(0.947051, 0.512699, 0.299049),
        vec3(0.949217, 0.517763, 0.295662),
        vec3(0.951344, 0.522850, 0.292275),
        vec3(0.953428, 0.527960, 0.288883),
        vec3(0.955470, 0.533093, 0.285490),
        vec3(0.957469, 0.538250, 0.282096),
        vec3(0.959424, 0.543431, 0.278701),
        vec3(0.961336, 0.548636, 0.275305),
        vec3(0.963203, 0.553865, 0.271909),
        vec3(0.965024, 0.559118, 0.268513),
        vec3(0.966798, 0.564396, 0.265118),
        vec3(0.968526, 0.569700, 0.261721),
        vec3(0.970205, 0.575028, 0.258325),
        vec3(0.971835, 0.580382, 0.254931),
        vec3(0.973416, 0.585761, 0.251540),
        vec3(0.974947, 0.591165, 0.248151),
        vec3(0.976428, 0.596595, 0.244767),
        vec3(0.977856, 0.602051, 0.241387),
        vec3(0.979233, 0.607532, 0.238013),
        vec3(0.980556, 0.613039, 0.234646),
        vec3(0.981826, 0.618572, 0.231287),
        vec3(0.983041, 0.624131, 0.227937),
        vec3(0.984199, 0.629718, 0.224595),
        vec3(0.985301, 0.635330, 0.221265),
        vec3(0.986345, 0.640969, 0.217948),
        vec3(0.987332, 0.646633, 0.214648),
        vec3(0.988260, 0.652325, 0.211364),
        vec3(0.989128, 0.658043, 0.208100),
        vec3(0.989935, 0.663787, 0.204859),
        vec3(0.990681, 0.669558, 0.201642),
        vec3(0.991365, 0.675355, 0.198453),
        vec3(0.991985, 0.681179, 0.195295),
        vec3(0.992541, 0.687030, 0.192170),
        vec3(0.993032, 0.692907, 0.189084),
        vec3(0.993456, 0.698810, 0.186041),
        vec3(0.993814, 0.704741, 0.183043),
        vec3(0.994103, 0.710698, 0.180097),
        vec3(0.994324, 0.716681, 0.177208),
        vec3(0.994474, 0.722691, 0.174381),
        vec3(0.994553, 0.728728, 0.171622),
        vec3(0.994561, 0.734791, 0.168938),
        vec3(0.994495, 0.740880, 0.166335),
        vec3(0.994355, 0.746995, 0.163821),
        vec3(0.994141, 0.753137, 0.161404),
        vec3(0.993851, 0.759304, 0.159092),
        vec3(0.993482, 0.765499, 0.156891),
        vec3(0.993033, 0.771720, 0.154808),
        vec3(0.992505, 0.777967, 0.152855),
        vec3(0.991897, 0.784239, 0.151042),
        vec3(0.991209, 0.790537, 0.149377),
        vec3(0.990439, 0.796859, 0.147870),
        vec3(0.989587, 0.803205, 0.146529),
        vec3(0.988648, 0.809579, 0.145357),
        vec3(0.987621, 0.815978, 0.144363),
        vec3(0.986509, 0.822401, 0.143557),
        vec3(0.985314, 0.828846, 0.142945),
        vec3(0.984031, 0.835315, 0.142528),
        vec3(0.982653, 0.841812, 0.142303),
        vec3(0.981190, 0.848329, 0.142279),
        vec3(0.979644, 0.854866, 0.142453),
        vec3(0.977995, 0.861432, 0.142808),
        vec3(0.976265, 0.868016, 0.143351),
        vec3(0.974443, 0.874622, 0.144061),
        vec3(0.972530, 0.881250, 0.144923),
        vec3(0.970533, 0.887896, 0.145919),
        vec3(0.968443, 0.894564, 0.147014),
        vec3(0.966271, 0.901249, 0.148180),
        vec3(0.964021, 0.907950, 0.149370),
        vec3(0.961681, 0.914672, 0.150520),
        vec3(0.959276, 0.921407, 0.151566),
        vec3(0.956808, 0.928152, 0.152409),
        vec3(0.954287, 0.934908, 0.152921),
        vec3(0.951726, 0.941671, 0.152925),
        vec3(0.949151, 0.948435, 0.152178),
        vec3(0.946602, 0.955190, 0.150328),
        vec3(0.944152, 0.961916, 0.146861),
        vec3(0.941896, 0.968590, 0.140956),
        vec3(0.940015, 0.975158, 0.131326),

    // viridis
        vec3(0.267004, 0.004874, 0.329415),
        vec3(0.268510, 0.009605, 0.335427),
        vec3(0.269944, 0.014625, 0.341379),
        vec3(0.271305, 0.019942, 0.347269),
        vec3(0.272594, 0.025563, 0.353093),
        vec3(0.273809, 0.031497, 0.358853),
        vec3(0.274952, 0.037752, 0.364543),
        vec3(0.276022, 0.044167, 0.370164),
        vec3(0.277018, 0.050344, 0.375715),
        vec3(0.277941, 0.056324, 0.381191),
        vec3(0.278791, 0.062145, 0.386592),
        vec3(0.279566, 0.067836, 0.391917),
        vec3(0.280267, 0.073417, 0.397163),
        vec3(0.280894, 0.078907, 0.402329),
        vec3(0.281446, 0.084320, 0.407414),
        vec3(0.281924, 0.089666, 0.412415),
        vec3(0.282327, 0.094955, 0.417331),
        vec3(0.282656, 0.100196, 0.422160),
        vec3(0.282910, 0.105393, 0.426902),
        vec3(0.283091, 0.110553, 0.431554),
        vec3(0.283197, 0.115680, 0.436115),
        vec3(0.283229, 0.120777, 0.440584),
        vec3(0.283187, 0.125848, 0.444960),
        vec3(0.283072, 0.130895, 0.449241),
        vec3(0.282884, 0.135920, 0.453427),
        vec3(0.282623, 0.140926, 0.457517),
        vec3(0.282290, 0.145912, 0.461510),
        vec3(0.281887, 0.150881, 0.465405),
        vec3(0.281412, 0.155834, 0.469201),
        vec3(0.280868, 0.160771, 0.472899),
        vec3(0.280255, 0.165693, 0.476498),
        vec3(0.279574, 0.170599, 0.479997),
        vec3(0.278826, 0.175490, 0.483397),
        vec3(0.278012, 0.180367, 0.486697),
        vec3(0.277134, 0.185228, 0.489898),
        vec3(0.276194, 0.190074, 0.493001),
        vec3(0.275191, 0.194905, 0.496005),
        vec3(0.274128, 0.199721, 0.498911),
        vec3(0.273006, 0.204520, 0.501721),
        vec3(0.271828, 0.209303, 0.504434),
        vec3(0.270595, 0.214069, 0.507052),
        vec3(0.269308, 0.218818, 0.509577),
        vec3(0.267968, 0.223549, 0.512008),
        vec3(0.266580, 0.228262, 0.514349),
        vec3(0.265145, 0.232956, 0.516599),
        vec3(0.263663, 0.237631, 0.518762),
        vec3(0.262138, 0.242286, 0.520837),
        vec3(0.260571, 0.246922, 0.522828),
        vec3(0.258965, 0.251537, 0.524736),
        vec3(0.257322, 0.256130, 0.526563),
        vec3(0.255645, 0.260703, 0.528312),
        vec3(0.253935, 0.265254, 0.529983),
        vec3(0.252194, 0.269783, 0.531579),
        vec3(0.250425, 0.274290, 0.533103),
        vec3(0.248629, 0.278775, 0.534556),
        vec3(0.246811, 0.283237, 0.535941),
        vec3(0.244972, 0.287675, 0.537260),
        vec3(0.243113, 0.292092, 0.538516),
        vec3(0.241237, 0.296485, 0.539709),
        vec3(0.239346, 0.300855, 0.540844),
        vec3(0.237441, 0.305202, 0.541921),
        vec3(0.235526, 0.309527, 0.542944),
        vec3(0.233603, 0.313828, 0.543914),
        vec3(0.231674, 0.318106, 0.544834),
        vec3(0.229739, 0.322361, 0.545706),
        vec3(0.227802, 0.326594, 0.546532),
        vec3(0.225863, 0.330805, 0.547314),
        vec3(0.223925, 0.334994, 0.548053),
        vec3(0.221989, 0.339161, 0.548752),
        vec3(0.220057, 0.343307, 0.549413),
        vec3(0.218130, 0.347432, 0.550038),
        vec3(0.216210, 0.351535, 0.550627),
        vec3(0.214298, 0.355619, 0.551184),
        vec3(0.212395, 0.359683, 0.551710),
        vec3(0.210503, 0.363727, 0.552206),
        vec3(0.208623, 0.367752, 0.552675),
        vec3(0.206756, 0.371758, 0.553117),
        vec3(0.204903, 0.375746, 0.553533),
        vec3(0.203063, 0.379716, 0.553925),
        vec3(0.201239, 0.383670, 0.554294),
        vec3(0.199430, 0.387607, 0.554642),
        vec3(0.197636, 0.391528, 0.554969),
        vec3(0.195860, 0.395433, 0.555276),
        vec3(0.194100, 0.399323, 0.555565),
        vec3(0.192357, 0.403199, 0.555836),
        vec3(0.190631, 0.407061, 0.556089),
        vec3(0.188923, 0.410910, 0.556326),
        vec3(0.187231, 0.414746, 0.556547),
        vec3(0.185556, 0.418570, 0.556753),
        vec3(0.183898, 0.422383, 0.556944),
        vec3(0.182256, 0.426184, 0.557120),
        vec3(0.180629, 0.429975, 0.557282),
        vec3(0.179019, 0.433756, 0.557430),
        vec3(0.177423, 0.437527, 0.557565),
        vec3(0.175841, 0.441290, 0.557685),
        vec3(0.174274, 0.445044, 0.557792),
        vec3(0.172719, 0.448791, 0.557885),
        vec3(0.171176, 0.452530, 0.557965),
        vec3(0.169646, 0.456262, 0.558030),
        vec3(0.168126, 0.459988, 0.558082),
        vec3(0.166617, 0.463708, 0.558119),
        vec3(0.165117, 0.467423, 0.558141),
        vec3(0.163625, 0.471133, 0.558148),
        vec3(0.162142, 0.474838, 0.558140),
        vec3(0.160665, 0.478540, 0.558115),
        vec3(0.159194, 0.482237, 0.558073),
        vec3(0.157729, 0.485932, 0.558013),
        vec3(0.156270, 0.489624, 0.557936),
        vec3(0.154815, 0.493313, 0.557840),
        vec3(0.153364, 0.497000, 0.557724),
        vec3(0.151918, 0.500685, 0.557587),
        vec3(0.150476, 0.504369, 0.557430),
        vec3(0.149039, 0.508051, 0.557250),
        vec3(0.147607, 0.511733, 0.557049),
        vec3(0.146180, 0.515413, 0.556823),
        vec3(0.144759, 0.519093, 0.556572),
        vec3(0.143343, 0.522773, 0.556295),
        vec3(0.141935, 0.526453, 0.555991),
        vec3(0.140536, 0.530132, 0.555659),
        vec3(0.139147, 0.533812, 0.555298),
        vec3(0.137770, 0.537492, 0.554906),
        vec3(0.136408, 0.541173, 0.554483),
        vec3(0.135066, 0.544853, 0.554029),
        vec3(0.133743, 0.548535, 0.553541),
        vec3(0.132444, 0.552216, 0.553018),
        vec3(0.131172, 0.555899, 0.552459),
        vec3(0.129933, 0.559582, 0.551864),
        vec3(0.128729, 0.563265, 0.551229),
        vec3(0.127568, 0.566949, 0.550556),
        vec3(0.126453, 0.570633, 0.549841),
        vec3(0.125394, 0.574318, 0.549086),
        vec3(0.124395, 0.578002, 0.548287),
        vec3(0.123463, 0.581687, 0.547445),
        vec3(0.122606, 0.585371, 0.546557),
        vec3(0.121831, 0.589055, 0.545623),
        vec3(0.121148, 0.592739, 0.544641),
        vec3(0.120565, 0.596422, 0.543611),
        vec3(0.120092, 0.600104, 0.542530),
        vec3(0.119738, 0.603785, 0.541400),
        vec3(0.119512, 0.607464, 0.540218),
        vec3(0.119423, 0.611141, 0.538982),
        vec3(0.119483, 0.614817, 0.537692),
        vec3(0.119699, 0.618490, 0.536347),
        vec3(0.120081, 0.622161, 0.534946),
        vec3(0.120638, 0.625828, 0.533488),
        vec3(0.121380, 0.629492, 0.531973),
        vec3(0.122312, 0.633153, 0.530398),
        vec3(0.123444, 0.636809, 0.528763),
        vec3(0.124780, 0.640461, 0.527068),
        vec3(0.126326, 0.644107, 0.525311),
        vec3(0.128087, 0.647749, 0.523491),
        vec3(0.130067, 0.651384, 0.521608),
        vec3(0.132268, 0.655014, 0.519661),
        vec3(0.134692, 0.658636, 0.517649),
        vec3(0.137339, 0.662252, 0.515571),
        vec3(0.140210, 0.665859, 0.513427),
        vec3(0.143303, 0.669459, 0.511215),
        vec3(0.146616, 0.673050, 0.508936),
        vec3(0.150148, 0.676631, 0.506589),
        vec3(0.153894, 0.680203, 0.504172),
        vec3(0.157851, 0.683765, 0.501686),
        vec3(0.162016, 0.687316, 0.499129),
        vec3(0.166383, 0.690856, 0.496502),
        vec3(0.170948, 0.694384, 0.493803),
        vec3(0.175707, 0.697900, 0.491033),
        vec3(0.180653, 0.701402, 0.488189),
        vec3(0.185783, 0.704891, 0.485273),
        vec3(0.191090, 0.708366, 0.482284),
        vec3(0.196571, 0.711827, 0.479221),
        vec3(0.202219, 0.715272, 0.476084),
        vec3(0.208030, 0.718701, 0.472873),
        vec3(0.214000, 0.722114, 0.469588),
        vec3(0.220124, 0.725509, 0.466226),
        vec3(0.226397, 0.728888, 0.462789),
        vec3(0.232815, 0.732247, 0.459277),
        vec3(0.239374, 0.735588, 0.455688),
        vec3(0.246070, 0.738910, 0.452024),
        vec3(0.252899, 0.742211, 0.448284),
        vec3(0.259857, 0.745492, 0.444467),
        vec3(0.266941, 0.748751, 0.440573),
        vec3(0.274149, 0.751988, 0.436601),
        vec3(0.281477, 0.755203, 0.432552),
        vec3(0.288921, 0.758394, 0.428426),
        vec3(0.296479, 0.761561, 0.424223),
        vec3(0.304148, 0.764704, 0.419943),
        vec3(0.311925, 0.767822, 0.415586),
        vec3(0.319809, 0.770914, 0.411152),
        vec3(0.327796, 0.773980, 0.406640),
        vec3(0.335885, 0.777018, 0.402049),
        vec3(0.344074, 0.780029, 0.397381),
        vec3(0.352360, 0.783011, 0.392636),
        vec3(0.360741, 0.785964, 0.387814),
        vec3(0.369214, 0.788888, 0.382914),
        vec3(0.377779, 0.791781, 0.377939),
        vec3(0.386433, 0.794644, 0.372886),
        vec3(0.395174, 0.797475, 0.367757),
        vec3(0.404001, 0.800275, 0.362552),
        vec3(0.412913, 0.803041, 0.357269),
        vec3(0.421908, 0.805774, 0.351910),
        vec3(0.430983, 0.808473, 0.346476),
        vec3(0.440137, 0.811138, 0.340967),
        vec3(0.449368, 0.813768, 0.335384),
        vec3(0.458674, 0.816363, 0.329727),
        vec3(0.468053, 0.818921, 0.323998),
        vec3(0.477504, 0.821444, 0.318195),
        vec3(0.487026, 0.823929, 0.312321),
        vec3(0.496615, 0.826376, 0.306377),
        vec3(0.506271, 0.828786, 0.300362),
        vec3(0.515992, 0.831158, 0.294279),
        vec3(0.525776, 0.833491, 0.288127),
        vec3(0.535621, 0.835785, 0.281908),
        vec3(0.545524, 0.838039, 0.275626),
        vec3(0.555484, 0.840254, 0.269281),
        vec3(0.565498, 0.842430, 0.262877),
        vec3(0.575563, 0.844566, 0.256415),
        vec3(0.585678, 0.846661, 0.249897),
        vec3(0.595839, 0.848717, 0.243329),
        vec3(0.606045, 0.850733, 0.236712),
        vec3(0.616293, 0.852709, 0.230052),
        vec3(0.626579, 0.854645, 0.223353),
        vec3(0.636902, 0.856542, 0.216620),
        vec3(0.647257, 0.858400, 0.209861),
        vec3(0.657642, 0.860219, 0.203082),
        vec3(0.668054, 0.861999, 0.196293),
        vec3(0.678489, 0.863742, 0.189503),
        vec3(0.688944, 0.865448, 0.182725),
        vec3(0.699415, 0.867117, 0.175971),
        vec3(0.709898, 0.868751, 0.169257),
        vec3(0.720391, 0.870350, 0.162603),
        vec3(0.730889, 0.871916, 0.156029),
        vec3(0.741388, 0.873449, 0.149561),
        vec3(0.751884, 0.874951, 0.143228),
        vec3(0.762373, 0.876424, 0.137064),
        vec3(0.772852, 0.877868, 0.131109),
        vec3(0.783315, 0.879285, 0.125405),
        vec3(0.793760, 0.880678, 0.120005),
        vec3(0.804182, 0.882046, 0.114965),
        vec3(0.814576, 0.883393, 0.110347),
        vec3(0.824940, 0.884720, 0.106217),
        vec3(0.835270, 0.886029, 0.102646),
        vec3(0.845561, 0.887322, 0.099702),
        vec3(0.855810, 0.888601, 0.097452),
        vec3(0.866013, 0.889868, 0.095953),
        vec3(0.876168, 0.891125, 0.095250),
        vec3(0.886271, 0.892374, 0.095374),
        vec3(0.896320, 0.893616, 0.096335),
        vec3(0.906311, 0.894855, 0.098125),
        vec3(0.916242, 0.896091, 0.100717),
        vec3(0.926106, 0.897330, 0.104071),
        vec3(0.935904, 0.898570, 0.108131),
        vec3(0.945636, 0.899815, 0.112838),
        vec3(0.955300, 0.901065, 0.118128),
        vec3(0.964894, 0.902323, 0.123941),
        vec3(0.974417, 0.903590, 0.130215),
        vec3(0.983868, 0.904867, 0.136897),
        vec3(0.993248, 0.906157, 0.14393),

    // cividis
        vec3(0.0000, 0.1262, 0.3015),
        vec3(0.0000, 0.1292, 0.3077),
        vec3(0.0000, 0.1321, 0.3142),
        vec3(0.0000, 0.1350, 0.3205),
        vec3(0.0000, 0.1379, 0.3269),
        vec3(0.0000, 0.1408, 0.3334),
        vec3(0.0000, 0.1437, 0.3400),
        vec3(0.0000, 0.1465, 0.3467),
        vec3(0.0000, 0.1492, 0.3537),
        vec3(0.0000, 0.1519, 0.3606),
        vec3(0.0000, 0.1546, 0.3676),
        vec3(0.0000, 0.1574, 0.3746),
        vec3(0.0000, 0.1601, 0.3817),
        vec3(0.0000, 0.1629, 0.3888),
        vec3(0.0000, 0.1657, 0.3960),
        vec3(0.0000, 0.1685, 0.4031),
        vec3(0.0000, 0.1714, 0.4102),
        vec3(0.0000, 0.1743, 0.4172),
        vec3(0.0000, 0.1773, 0.4241),
        vec3(0.0000, 0.1798, 0.4307),
        vec3(0.0000, 0.1817, 0.4347),
        vec3(0.0000, 0.1834, 0.4363),
        vec3(0.0000, 0.1852, 0.4368),
        vec3(0.0000, 0.1872, 0.4368),
        vec3(0.0000, 0.1901, 0.4365),
        vec3(0.0000, 0.1930, 0.4361),
        vec3(0.0000, 0.1958, 0.4356),
        vec3(0.0000, 0.1987, 0.4349),
        vec3(0.0000, 0.2015, 0.4343),
        vec3(0.0000, 0.2044, 0.4336),
        vec3(0.0000, 0.2073, 0.4329),
        vec3(0.0055, 0.2101, 0.4322),
        vec3(0.0236, 0.2130, 0.4314),
        vec3(0.0416, 0.2158, 0.4308),
        vec3(0.0576, 0.2187, 0.4301),
        vec3(0.0710, 0.2215, 0.4293),
        vec3(0.0827, 0.2244, 0.4287),
        vec3(0.0932, 0.2272, 0.4280),
        vec3(0.1030, 0.2300, 0.4274),
        vec3(0.1120, 0.2329, 0.4268),
        vec3(0.1204, 0.2357, 0.4262),
        vec3(0.1283, 0.2385, 0.4256),
        vec3(0.1359, 0.2414, 0.4251),
        vec3(0.1431, 0.2442, 0.4245),
        vec3(0.1500, 0.2470, 0.4241),
        vec3(0.1566, 0.2498, 0.4236),
        vec3(0.1630, 0.2526, 0.4232),
        vec3(0.1692, 0.2555, 0.4228),
        vec3(0.1752, 0.2583, 0.4224),
        vec3(0.1811, 0.2611, 0.4220),
        vec3(0.1868, 0.2639, 0.4217),
        vec3(0.1923, 0.2667, 0.4214),
        vec3(0.1977, 0.2695, 0.4212),
        vec3(0.2030, 0.2723, 0.4209),
        vec3(0.2082, 0.2751, 0.4207),
        vec3(0.2133, 0.2780, 0.4205),
        vec3(0.2183, 0.2808, 0.4204),
        vec3(0.2232, 0.2836, 0.4203),
        vec3(0.2281, 0.2864, 0.4202),
        vec3(0.2328, 0.2892, 0.4201),
        vec3(0.2375, 0.2920, 0.4200),
        vec3(0.2421, 0.2948, 0.4200),
        vec3(0.2466, 0.2976, 0.4200),
        vec3(0.2511, 0.3004, 0.4201),
        vec3(0.2556, 0.3032, 0.4201),
        vec3(0.2599, 0.3060, 0.4202),
        vec3(0.2643, 0.3088, 0.4203),
        vec3(0.2686, 0.3116, 0.4205),
        vec3(0.2728, 0.3144, 0.4206),
        vec3(0.2770, 0.3172, 0.4208),
        vec3(0.2811, 0.3200, 0.4210),
        vec3(0.2853, 0.3228, 0.4212),
        vec3(0.2894, 0.3256, 0.4215),
        vec3(0.2934, 0.3284, 0.4218),
        vec3(0.2974, 0.3312, 0.4221),
        vec3(0.3014, 0.3340, 0.4224),
        vec3(0.3054, 0.3368, 0.4227),
        vec3(0.3093, 0.3396, 0.4231),
        vec3(0.3132, 0.3424, 0.4236),
        vec3(0.3170, 0.3453, 0.4240),
        vec3(0.3209, 0.3481, 0.4244),
        vec3(0.3247, 0.3509, 0.4249),
        vec3(0.3285, 0.3537, 0.4254),
        vec3(0.3323, 0.3565, 0.4259),
        vec3(0.3361, 0.3593, 0.4264),
        vec3(0.3398, 0.3622, 0.4270),
        vec3(0.3435, 0.3650, 0.4276),
        vec3(0.3472, 0.3678, 0.4282),
        vec3(0.3509, 0.3706, 0.4288),
        vec3(0.3546, 0.3734, 0.4294),
        vec3(0.3582, 0.3763, 0.4302),
        vec3(0.3619, 0.3791, 0.4308),
        vec3(0.3655, 0.3819, 0.4316),
        vec3(0.3691, 0.3848, 0.4322),
        vec3(0.3727, 0.3876, 0.4331),
        vec3(0.3763, 0.3904, 0.4338),
        vec3(0.3798, 0.3933, 0.4346),
        vec3(0.3834, 0.3961, 0.4355),
        vec3(0.3869, 0.3990, 0.4364),
        vec3(0.3905, 0.4018, 0.4372),
        vec3(0.3940, 0.4047, 0.4381),
        vec3(0.3975, 0.4075, 0.4390),
        vec3(0.4010, 0.4104, 0.4400),
        vec3(0.4045, 0.4132, 0.4409),
        vec3(0.4080, 0.4161, 0.4419),
        vec3(0.4114, 0.4189, 0.4430),
        vec3(0.4149, 0.4218, 0.4440),
        vec3(0.4183, 0.4247, 0.4450),
        vec3(0.4218, 0.4275, 0.4462),
        vec3(0.4252, 0.4304, 0.4473),
        vec3(0.4286, 0.4333, 0.4485),
        vec3(0.4320, 0.4362, 0.4496),
        vec3(0.4354, 0.4390, 0.4508),
        vec3(0.4388, 0.4419, 0.4521),
        vec3(0.4422, 0.4448, 0.4534),
        vec3(0.4456, 0.4477, 0.4547),
        vec3(0.4489, 0.4506, 0.4561),
        vec3(0.4523, 0.4535, 0.4575),
        vec3(0.4556, 0.4564, 0.4589),
        vec3(0.4589, 0.4593, 0.4604),
        vec3(0.4622, 0.4622, 0.4620),
        vec3(0.4656, 0.4651, 0.4635),
        vec3(0.4689, 0.4680, 0.4650),
        vec3(0.4722, 0.4709, 0.4665),
        vec3(0.4756, 0.4738, 0.4679),
        vec3(0.4790, 0.4767, 0.4691),
        vec3(0.4825, 0.4797, 0.4701),
        vec3(0.4861, 0.4826, 0.4707),
        vec3(0.4897, 0.4856, 0.4714),
        vec3(0.4934, 0.4886, 0.4719),
        vec3(0.4971, 0.4915, 0.4723),
        vec3(0.5008, 0.4945, 0.4727),
        vec3(0.5045, 0.4975, 0.4730),
        vec3(0.5083, 0.5005, 0.4732),
        vec3(0.5121, 0.5035, 0.4734),
        vec3(0.5158, 0.5065, 0.4736),
        vec3(0.5196, 0.5095, 0.4737),
        vec3(0.5234, 0.5125, 0.4738),
        vec3(0.5272, 0.5155, 0.4739),
        vec3(0.5310, 0.5186, 0.4739),
        vec3(0.5349, 0.5216, 0.4738),
        vec3(0.5387, 0.5246, 0.4739),
        vec3(0.5425, 0.5277, 0.4738),
        vec3(0.5464, 0.5307, 0.4736),
        vec3(0.5502, 0.5338, 0.4735),
        vec3(0.5541, 0.5368, 0.4733),
        vec3(0.5579, 0.5399, 0.4732),
        vec3(0.5618, 0.5430, 0.4729),
        vec3(0.5657, 0.5461, 0.4727),
        vec3(0.5696, 0.5491, 0.4723),
        vec3(0.5735, 0.5522, 0.4720),
        vec3(0.5774, 0.5553, 0.4717),
        vec3(0.5813, 0.5584, 0.4714),
        vec3(0.5852, 0.5615, 0.4709),
        vec3(0.5892, 0.5646, 0.4705),
        vec3(0.5931, 0.5678, 0.4701),
        vec3(0.5970, 0.5709, 0.4696),
        vec3(0.6010, 0.5740, 0.4691),
        vec3(0.6050, 0.5772, 0.4685),
        vec3(0.6089, 0.5803, 0.4680),
        vec3(0.6129, 0.5835, 0.4673),
        vec3(0.6168, 0.5866, 0.4668),
        vec3(0.6208, 0.5898, 0.4662),
        vec3(0.6248, 0.5929, 0.4655),
        vec3(0.6288, 0.5961, 0.4649),
        vec3(0.6328, 0.5993, 0.4641),
        vec3(0.6368, 0.6025, 0.4632),
        vec3(0.6408, 0.6057, 0.4625),
        vec3(0.6449, 0.6089, 0.4617),
        vec3(0.6489, 0.6121, 0.4609),
        vec3(0.6529, 0.6153, 0.4600),
        vec3(0.6570, 0.6185, 0.4591),
        vec3(0.6610, 0.6217, 0.4583),
        vec3(0.6651, 0.6250, 0.4573),
        vec3(0.6691, 0.6282, 0.4562),
        vec3(0.6732, 0.6315, 0.4553),
        vec3(0.6773, 0.6347, 0.4543),
        vec3(0.6813, 0.6380, 0.4532),
        vec3(0.6854, 0.6412, 0.4521),
        vec3(0.6895, 0.6445, 0.4511),
        vec3(0.6936, 0.6478, 0.4499),
        vec3(0.6977, 0.6511, 0.4487),
        vec3(0.7018, 0.6544, 0.4475),
        vec3(0.7060, 0.6577, 0.4463),
        vec3(0.7101, 0.6610, 0.4450),
        vec3(0.7142, 0.6643, 0.4437),
        vec3(0.7184, 0.6676, 0.4424),
        vec3(0.7225, 0.6710, 0.4409),
        vec3(0.7267, 0.6743, 0.4396),
        vec3(0.7308, 0.6776, 0.4382),
        vec3(0.7350, 0.6810, 0.4368),
        vec3(0.7392, 0.6844, 0.4352),
        vec3(0.7434, 0.6877, 0.4338),
        vec3(0.7476, 0.6911, 0.4322),
        vec3(0.7518, 0.6945, 0.4307),
        vec3(0.7560, 0.6979, 0.4290),
        vec3(0.7602, 0.7013, 0.4273),
        vec3(0.7644, 0.7047, 0.4258),
        vec3(0.7686, 0.7081, 0.4241),
        vec3(0.7729, 0.7115, 0.4223),
        vec3(0.7771, 0.7150, 0.4205),
        vec3(0.7814, 0.7184, 0.4188),
        vec3(0.7856, 0.7218, 0.4168),
        vec3(0.7899, 0.7253, 0.4150),
        vec3(0.7942, 0.7288, 0.4129),
        vec3(0.7985, 0.7322, 0.4111),
        vec3(0.8027, 0.7357, 0.4090),
        vec3(0.8070, 0.7392, 0.4070),
        vec3(0.8114, 0.7427, 0.4049),
        vec3(0.8157, 0.7462, 0.4028),
        vec3(0.8200, 0.7497, 0.4007),
        vec3(0.8243, 0.7532, 0.3984),
        vec3(0.8287, 0.7568, 0.3961),
        vec3(0.8330, 0.7603, 0.3938),
        vec3(0.8374, 0.7639, 0.3915),
        vec3(0.8417, 0.7674, 0.3892),
        vec3(0.8461, 0.7710, 0.3869),
        vec3(0.8505, 0.7745, 0.3843),
        vec3(0.8548, 0.7781, 0.3818),
        vec3(0.8592, 0.7817, 0.3793),
        vec3(0.8636, 0.7853, 0.3766),
        vec3(0.8681, 0.7889, 0.3739),
        vec3(0.8725, 0.7926, 0.3712),
        vec3(0.8769, 0.7962, 0.3684),
        vec3(0.8813, 0.7998, 0.3657),
        vec3(0.8858, 0.8035, 0.3627),
        vec3(0.8902, 0.8071, 0.3599),
        vec3(0.8947, 0.8108, 0.3569),
        vec3(0.8992, 0.8145, 0.3538),
        vec3(0.9037, 0.8182, 0.3507),
        vec3(0.9082, 0.8219, 0.3474),
        vec3(0.9127, 0.8256, 0.3442),
        vec3(0.9172, 0.8293, 0.3409),
        vec3(0.9217, 0.8330, 0.3374),
        vec3(0.9262, 0.8367, 0.3340),
        vec3(0.9308, 0.8405, 0.3306),
        vec3(0.9353, 0.8442, 0.3268),
        vec3(0.9399, 0.8480, 0.3232),
        vec3(0.9444, 0.8518, 0.3195),
        vec3(0.9490, 0.8556, 0.3155),
        vec3(0.9536, 0.8593, 0.3116),
        vec3(0.9582, 0.8632, 0.3076),
        vec3(0.9628, 0.8670, 0.3034),
        vec3(0.9674, 0.8708, 0.2990),
        vec3(0.9721, 0.8746, 0.2947),
        vec3(0.9767, 0.8785, 0.2901),
        vec3(0.9814, 0.8823, 0.2856),
        vec3(0.9860, 0.8862, 0.2807),
        vec3(0.9907, 0.8901, 0.2759),
        vec3(0.9954, 0.8940, 0.2708),
        vec3(1.0000, 0.8979, 0.2655),
        vec3(1.0000, 0.9018, 0.2600),
        vec3(1.0000, 0.9057, 0.2593),
        vec3(1.0000, 0.9094, 0.2634),
        vec3(1.0000, 0.9131, 0.2680),
        vec3(1.0000, 0.9169, 0.2731)
};

uniform sampler2D Texture;
uniform sampler2D Texture0;
uniform sampler2D Texture1;
uniform sampler2D Texture2;
uniform sampler2D Texture3;

uniform vec2 TextureSize;
uniform vec3 BackgroundColor;
uniform float PremultiplyAlpha;
uniform float DisableFinalAlpha;
uniform bool ForceNearestSampling;
uniform vec4 Grid;
uniform vec2 GridWidth;

uniform vec4 StokesFilter;
uniform int is_polarimetric;
uniform int polarimetric_mode;

uniform int mode;
uniform vec4 mode_data;
uniform int colourmap_id;

in vec2 Frag_UV;
in vec2 Frag_Pos;

layout (location = 0) out vec4 Out_Color;

vec3 colourmap(float x) {
    const float N = 256;
    float a  = clamp(x,0,1) * (N - 1);
    float i  = floor(a);
    float t  = a - i;

    int offset = colourmap_id*256;
    vec3 c0 = colourmaps[int(i) + offset];
    vec3 c1 = colourmaps[int(ceil(a)+.5f) + offset];

    return mix(c0,c1,t);
}

float dop(vec4 S) {
    vec3 S123 = vec3(S.y,S.z,S.w);
    return S.x>0 ? length(S123) / S.x : 0;
}

float dolp(vec4 S) {
    vec2 S12 = vec2(S.y,S.z);
    return S.x>0 ? length(S12) / S.x : 0;
}

float docp(vec4 S) {
    return S.x>0 ? abs(S.w) / S.x : 0;
}

float sRGB(float x) {
    if (x<=.0031308f)
        return max(0,12.92f*x);
    return 1.055f*pow(x,1.f/2.4f) - .055f;
}

// these ignore the sensor's choosen whitepoint, but good enough for visualization purposes
float luminance(vec3 rgb) {
    return dot(vec3(.2126,.7152,.0722), rgb);
}
float Lstar(vec3 rgb) {
    float y = luminance(rgb);
    float Lstar;
    if (y<=216.f/24389.f)
        Lstar = y * (24389.f/27.f);
    else
        Lstar = pow(y,1.f/3.f) * 116.f - 16.f;
    return Lstar / 100.f;
}

void main() {
    vec2 uv;
    vec2 texel = Frag_UV * TextureSize;
    if (ForceNearestSampling)
        uv = (floor(texel) + vec2(0.5,0.5)) / TextureSize;
    else
        uv = Frag_UV;
    vec2 texelEdge = step(mod(texel,vec2(1.0,1.0)),GridWidth);
    float isGrid = max(texelEdge.x, texelEdge.y);

    const float checkboard_size = 22;
    float total = floor(Frag_Pos.x/checkboard_size) +
                  floor(Frag_Pos.y/checkboard_size);
    bool isEven = mod(total, 2.0) == 0.0;
    vec4 col1 = vec4(.55);
    vec4 col2 = vec4(.65);
    vec4 cbcol = isEven ? col1 : col2;

    bool ignore_mode = false;

    vec4 ct;
    if (is_polarimetric==0) {
        ct = texture(Texture, uv);
    } else {
        vec4 ct0 = texture(Texture0, uv);
        vec4 ct1 = texture(Texture1, uv);
        vec4 ct2 = texture(Texture2, uv);
        vec4 ct3 = texture(Texture3, uv);
        vec4 Sr = vec4(ct0.x,ct1.x,ct2.x,ct3.x);
        vec4 Sg = vec4(ct0.y,ct1.y,ct2.y,ct3.y);
        vec4 Sb = vec4(ct0.z,ct1.z,ct2.z,ct3.z);

        if (polarimetric_mode==1) {
            // DOP
            ct.x = dop(Sr);
            ct.y = dop(Sg);
            ct.z = dop(Sb);
            ct.w = 1;
        } else if (polarimetric_mode==2) {
            // DOLP
            ct.x = dolp(Sr);
            ct.y = dolp(Sg);
            ct.z = dolp(Sb);
            ct.w = 1;
        } else if (polarimetric_mode==3) {
            // DOCP
            ct.x = docp(Sr);
            ct.y = docp(Sg);
            ct.z = docp(Sb);
            ct.w = 1;
        } else if (polarimetric_mode==4) {
            // LP Dir

            vec4 S = vec4(
                luminance(vec3(Sr.x,Sg.x,Sb.x)),
                luminance(vec3(Sr.y,Sg.y,Sb.y)),
                luminance(vec3(Sr.z,Sg.z,Sb.z)),
                luminance(vec3(Sr.w,Sg.w,Sb.w))
            );

            // visualization of LP (Wilkie&Weidlich 2010)
            // red-green for S1 (horizontal LP)
            // blue-yellow for S2 (diagonal LP)
            float S1 = S.y/S.x;
            float S2 = S.z/S.x;
            vec3 vis = (
                max(0,+S1) * vec3(0,1,0) +
                max(0,-S1) * vec3(1,0,0) +
                max(0,+S2) * vec3(.8,.8,0) +
                max(0,-S2) * vec3(0,0,1)
            );

            ct.xyz = vis;
            ct.w = 1;

            ignore_mode = true;
        } else if (polarimetric_mode==5) {
            // Error
            ct.x = dop(Sr) <= 1 ? 0 : 1;
            ct.y = dop(Sg) <= 1 ? 0 : 1;
            ct.z = dop(Sb) <= 1 ? 0 : 1;
            ct.w = 1;

            ignore_mode = true;
        } else {
            // filter
            ct.x = dot(StokesFilter, Sr);
            ct.y = dot(StokesFilter, Sg);
            ct.z = dot(StokesFilter, Sb);
            ct.w = 1;
        }
    }

    if (!ignore_mode) {
        if (mode_data.w!=0) {
            // monochromatic input
            ct.xyz = vec3(ct.x);
        }

        if ((mode==0 || mode==1) && mode_data.x!=0) {
            // exposure
            ct.xyz *= pow(2.f,mode_data.x);
        }
        if (mode==1) {
            // gamma
            float g = mode_data.y;
            if (g<0) {
                // sRGB
                ct.x = sRGB(ct.x);
                ct.y = sRGB(ct.y);
                ct.z = sRGB(ct.z);
            } else {
                ct.xyz = pow(max(vec3(0),ct.xyz), vec3(1.f/g));
            }
        } else if (mode==2) {
            // decibels
            float db_min = mode_data.x;
            float db_max = mode_data.y;

            float v = dot(vec3(1.f/3.f), ct.xyz);
            float db = 10.f/log(10.f) * log(max(0,v));
            float x = (db-db_min) / max(0,db_max-db_min);

            ct.xyz = colourmap(x);

            if (any(isinf(ct)))
                ct.xyz = vec3(0);
        } else if (mode==3) {
            // FC
            const float fc_min = mode_data.y;
            const float fc_max = mode_data.z;
            const int channel = floatBitsToInt(mode_data.x);

            float val;
            if (channel == 3)
                val = luminance(ct.xyz);
            else if (channel == 4)
                val = Lstar(ct.xyz);
            else
                val = ct[channel];

            if (fc_min>=0) {
                ct.xyz = colourmap(fc_max<=fc_min ? 0 : (val-fc_min) / (fc_max-fc_min));
            } else {
                ct.xyz = fc_max<=0 ? vec3(0) :
                         (vec3(1,0,0) * max(0,-val/fc_max) + vec3(0,1,0) * max(0,val/fc_max));
            }
        }
    }

    ct.rgb = ct.rgb * mix(1.0, ct.a, PremultiplyAlpha);
    ct.rgb += BackgroundColor * (1.0-ct.a);
    ct.a = mix(ct.a, 1.0, DisableFinalAlpha);
    ct = mix(ct, vec4(Grid.rgb,1), Grid.a * isGrid);

    bool isBg = max(uv.x,uv.y)>1 || min(uv.x,uv.y)<0;
    ct = mix(ct,cbcol,bvec4(isBg));

    Out_Color = ct;
}
)";

/* BuildShader is from imgui_impl_opengl3.cpp.  Only change is to query the 
 * additional uniform locations for the new fragment shader*/
void BuildShader() {
    // Shader selection code based on imgui_impl_opengl3.cpp

    // Parse GLSL version string
    int glsl_version = 130;
    sscanf(g_GlslVersionString, "#version %d", &glsl_version);
    assert(glsl_version >= 410);

    // Select shaders matching our GLSL versions
    const GLchar *vertex_shader = nullptr;
    const GLchar *fragment_shader = nullptr;
    vertex_shader = vertex_shader_glsl_410_core;
    fragment_shader = fragment_shader_glsl_410_core;

    {
        // Create shaders
        const GLchar *vertex_shader_with_version[2] = {g_GlslVersionString, vertex_shader};
        g_VertHandle = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(g_VertHandle, 2, vertex_shader_with_version, nullptr);
        glCompileShader(g_VertHandle);
        CheckShader(g_VertHandle, "vertex shader");

        const GLchar *fragment_shader_with_version[2] = {g_GlslVersionString, fragment_shader};
        g_FragHandle = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(g_FragHandle, 2, fragment_shader_with_version, nullptr);
        glCompileShader(g_FragHandle);
        CheckShader(g_FragHandle, "fragment shader");

        g_ShaderHandle = glCreateProgram();
        glAttachShader(g_ShaderHandle, g_VertHandle);
        glAttachShader(g_ShaderHandle, g_FragHandle);
        glLinkProgram(g_ShaderHandle);
        CheckProgram(g_ShaderHandle, "shader program");

        g_AttribLocationTex       = glGetUniformLocation(g_ShaderHandle, "Texture");
        g_AttribLocationTex0      = glGetUniformLocation(g_ShaderHandle, "Texture0");
        g_AttribLocationTex1      = glGetUniformLocation(g_ShaderHandle, "Texture1");
        g_AttribLocationTex2      = glGetUniformLocation(g_ShaderHandle, "Texture2");
        g_AttribLocationTex3      = glGetUniformLocation(g_ShaderHandle, "Texture3");
        g_AttribLocationProjMtx  = glGetUniformLocation(g_ShaderHandle, "ProjMtx");
        g_AttribLocationVtxPos   = (GLuint)glGetAttribLocation(g_ShaderHandle, "Position");
        g_AttribLocationVtxUV    = (GLuint)glGetAttribLocation(g_ShaderHandle, "UV");

        // Change from imgui_impl_opengl3.cpp  (Our shader doesn't use vertex color)
        //g_AttribLocationVtxColor = (GLuint)glGetAttribLocation(g_ShaderHandle, "Color");

        // New uniforms used by imgui_tex_inspect 
        g_UniformLocationTextureSize          = glGetUniformLocation(g_ShaderHandle, "TextureSize");
        g_UniformLocationBackgroundColor      = glGetUniformLocation(g_ShaderHandle, "BackgroundColor");
        g_UniformLocationPremultiplyAlpha     = glGetUniformLocation(g_ShaderHandle, "PremultiplyAlpha");
        g_UniformLocationDisableFinalAlpha    = glGetUniformLocation(g_ShaderHandle, "DisableFinalAlpha");
        g_UniformLocationGrid                 = glGetUniformLocation(g_ShaderHandle, "Grid");
        g_UniformLocationForceNearestSampling = glGetUniformLocation(g_ShaderHandle, "ForceNearestSampling");
        g_UniformLocationGridWidth            = glGetUniformLocation(g_ShaderHandle, "GridWidth");
        g_UniformLocationMode                 = glGetUniformLocation(g_ShaderHandle, "mode");
        g_UniformLocationModeData             = glGetUniformLocation(g_ShaderHandle, "mode_data");
        g_UniformLocationCMid                 = glGetUniformLocation(g_ShaderHandle, "colourmap_id");
        g_UniformLocationStokesFilter         = glGetUniformLocation(g_ShaderHandle, "StokesFilter");
        g_UniformLocationPolarimetric         = glGetUniformLocation(g_ShaderHandle, "is_polarimetric");
        g_UniformLocationPolarimetricMode     = glGetUniformLocation(g_ShaderHandle, "polarimetric_mode");
    }
}

} // namespace imgui_impl_opengl


namespace ImGuiTexInspect {
using namespace imgui_impl_opengl;

//-------------------------------------------------------------------------
// [SECTION] Init and Shutdown
//-------------------------------------------------------------------------

bool ImplOpenGL3_Init(const char *glsl_version) {
    GLint major = 0;
    GLint minor = 0;
    glGetIntegerv(GL_MAJOR_VERSION, &major);
    glGetIntegerv(GL_MINOR_VERSION, &minor);
    if (major == 0 && minor == 0) {
        // Query GL_VERSION in desktop GL 2.x, the string will start with "<major>.<minor>"
        const char* gl_version = (const char*)glGetString(GL_VERSION);
        sscanf(gl_version, "%d.%d", &major, &minor);
    }
    g_GlVersion = (GLuint)(major * 100 + minor * 10);


    IM_ASSERT((int)strlen(glsl_version) + 2 < IM_ARRAYSIZE(g_GlslVersionString));
    strcpy(g_GlslVersionString, glsl_version);
    strcat(g_GlslVersionString, "\n");
    
    BuildShader();

    return true;
}
void ImplOpenGl3_Shutdown() {
    // No need to call ImGui_ImplOpenGL3_Shutdown, it doesn't even
    // exist in the imgui_impl_opengl namespace.  Our version of
    // ImGui_ImplOpenGL3_Init doesn't affect OpenGL state.

    glDeleteShader(g_VertHandle);
    glDeleteShader(g_FragHandle);
    glDeleteProgram(g_ShaderHandle);

    g_VertHandle = 0;
    g_FragHandle = 0;
    g_ShaderHandle = 0;
}

void GiveNotInitializedWarning() {
    static bool warningGiven = false;
    if (!warningGiven) {
        std::cerr << std::format("ERROR: ImGuiTexInspect backend not initialized") << '\n';
        warningGiven = true;
    }
}

//-------------------------------------------------------------------------
// [SECTION] BackEnd functions declared in imgui_tex_inspect_internal.h
//-------------------------------------------------------------------------

void BackEnd_SetShader(const ImDrawList *, const ImDrawCmd *, const Inspector *inspector) {
    const ShaderOptions *texConversion = &inspector->CachedShaderOptions;
    if (g_ShaderHandle) {
        ImDrawData *draw_data = ImGui::GetDrawData();
        int fb_width = (int)(draw_data->DisplaySize.x * draw_data->FramebufferScale.x);
        int fb_height = (int)(draw_data->DisplaySize.y * draw_data->FramebufferScale.y);

        if (fb_width <= 0 || fb_height <= 0)
            return;

        // Setup normal ImGui GL state
        ImGui_ImplOpenGL3_SetupRenderState(draw_data, fb_width, fb_height);

        const auto& texture_size = inspector->texture_size();

        if (texConversion->is_polarimetric) {
            glUniform1i(g_AttribLocationTex0, 4);
            glActiveTexture(GL_TEXTURE0 + 4);
            glBindTexture(GL_TEXTURE_2D, inspector->Textures[0]);
            glUniform1i(g_AttribLocationTex1, 5);
            glActiveTexture(GL_TEXTURE0 + 5);
            glBindTexture(GL_TEXTURE_2D, inspector->Textures[1]);
            glUniform1i(g_AttribLocationTex2, 6);
            glActiveTexture(GL_TEXTURE0 + 6);
            glBindTexture(GL_TEXTURE_2D, inspector->Textures[2]);
            glUniform1i(g_AttribLocationTex3, 7);
            glActiveTexture(GL_TEXTURE0 + 7);
            glBindTexture(GL_TEXTURE_2D, inspector->Textures[3]);

            glActiveTexture(GL_TEXTURE0); 
        } else {
            glUniform1i(g_AttribLocationTex, 0);
        }

        // Setup imgui_tex_inspect specific shader uniforms
        glUniform2fv(g_UniformLocationTextureSize,          1, &texture_size.x);
        glUniform3fv(g_UniformLocationBackgroundColor,      1, &texConversion->BackgroundColor.x);
        glUniform1f(g_UniformLocationPremultiplyAlpha,         texConversion->PremultiplyAlpha);
        glUniform1f(g_UniformLocationDisableFinalAlpha,        texConversion->DisableFinalAlpha);
        glUniform1i(g_UniformLocationForceNearestSampling,     texConversion->ForceNearestSampling);
        glUniform2fv(g_UniformLocationGridWidth,            1, &texConversion->GridWidth.x);
        glUniform4fv(g_UniformLocationGrid,                 1, &texConversion->GridColor.x);
        glUniform1i(g_UniformLocationMode,                     texConversion->Mode);
        glUniform4fv(g_UniformLocationModeData,             1, &texConversion->ModeData.x);
        glUniform1i(g_UniformLocationCMid,                     texConversion->colourmap);
        glUniform1i(g_UniformLocationPolarimetric,             texConversion->is_polarimetric);
        glUniform1i(g_UniformLocationPolarimetricMode,         texConversion->PolMode);
        glUniform4fv(g_UniformLocationStokesFilter,         1, &texConversion->stokes_filter.x);
    }
    else {
        GiveNotInitializedWarning();
    }
}

} // namespace ImGuiTexInspect
