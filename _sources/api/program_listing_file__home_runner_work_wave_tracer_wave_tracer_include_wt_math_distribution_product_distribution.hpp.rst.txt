
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_distribution_product_distribution.hpp:

Program Listing for File product_distribution.hpp
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_distribution_product_distribution.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/math/distribution/product_distribution.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <cassert>
   #include <utility>
   #include <wt/util/unreachable.hpp>
   
   #include <wt/math/common.hpp>
   #include "discrete_distribution.hpp"
   #include "gaussian1d.hpp"
   #include "truncated_gaussian1d.hpp"
   #include "piecewise_linear_distribution.hpp"
   #include "binned_piecewise_linear_distribution.hpp"
   #include "uniform_distribution.hpp"
   
   namespace wt {
   
   template <typename Dist>
   struct product_distribution_ret_t {
       using dist_type = Dist;
   
       Dist dist;
   
       f_t R0;
   
       bool approximate;
   
       bool discrete = false;
   };
   
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const discrete_distribution_t<vec2_t>& dist2);
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const uniform_distribution_t& dist2);
   inline product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const uniform_distribution_t& dist1,
                            const discrete_distribution_t<vec2_t>& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const piecewise_linear_distribution_t& dist2);
   inline product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const discrete_distribution_t<vec2_t>& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const binned_piecewise_linear_distribution_t& dist2);
   inline product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const discrete_distribution_t<vec2_t>& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const gaussian1d_t& dist2);
   inline product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const gaussian1d_t& dist1,
                            const discrete_distribution_t<vec2_t>& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const discrete_distribution_t<vec2_t>& dist1,
                            const truncated_gaussian1d_t& dist2);
   inline product_distribution_ret_t<discrete_distribution_t<vec2_t>>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const discrete_distribution_t<vec2_t>& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const piecewise_linear_distribution_t& dist2);
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const uniform_distribution_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const uniform_distribution_t& dist1,
                            const piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const gaussian1d_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const gaussian1d_t& dist1,
                            const piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const truncated_gaussian1d_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const piecewise_linear_distribution_t& dist1,
                            const binned_piecewise_linear_distribution_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const binned_piecewise_linear_distribution_t& dist2);
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const uniform_distribution_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const uniform_distribution_t& dist1,
                            const binned_piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const gaussian1d_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const gaussian1d_t& dist1,
                            const binned_piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const binned_piecewise_linear_distribution_t& dist1,
                            const truncated_gaussian1d_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const binned_piecewise_linear_distribution_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const gaussian1d_t& dist1,
                            const gaussian1d_t& dist2);
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const gaussian1d_t& dist1,
                            const uniform_distribution_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const uniform_distribution_t& dist1,
                            const gaussian1d_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const gaussian1d_t& dist1,
                            const truncated_gaussian1d_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const gaussian1d_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const truncated_gaussian1d_t& dist2);
   
   product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const truncated_gaussian1d_t& dist1,
                            const uniform_distribution_t& dist2);
   inline product_distribution_ret_t<piecewise_linear_distribution_t>
       product_distribution(const uniform_distribution_t& dist1,
                            const truncated_gaussian1d_t& dist2) {
       return product_distribution(dist2, dist1);
   }
   
   
   product_distribution_ret_t<uniform_distribution_t>
       product_distribution(const uniform_distribution_t& dist1,
                            const uniform_distribution_t& dist2);
   
   
   namespace detail {
   
   template <typename T, typename S>
   inline auto product_distribution_impl_b(const T* f, const S* g) {
       auto d = product_distribution(*f, *g);
       return product_distribution_ret_t<std::unique_ptr<distribution1d_t>>{
           .dist = std::make_unique<typename decltype(d)::dist_type>(std::move(d.dist)),
           .R0 = d.R0,
           .approximate = d.approximate,
           .discrete = d.discrete,
       };
   }
   
   template <typename T>
   inline auto product_distribution_impl_a(const T* f, const distribution1d_t* g) {
       if (auto p = dynamic_cast<const discrete_distribution_t<vec2_t>*>(g); p)
           return detail::product_distribution_impl_b(f, p);
       if (auto p = dynamic_cast<const uniform_distribution_t*>(g); p)
           return detail::product_distribution_impl_b(f, p);
       if (auto p = dynamic_cast<const piecewise_linear_distribution_t*>(g); p)
           return detail::product_distribution_impl_b(f, p);
       if (auto p = dynamic_cast<const binned_piecewise_linear_distribution_t*>(g); p)
           return detail::product_distribution_impl_b(f, p);
       if (auto p = dynamic_cast<const gaussian1d_t*>(g); p)
           return detail::product_distribution_impl_b(f, p);
       if (auto p = dynamic_cast<const truncated_gaussian1d_t*>(g); p)
           return detail::product_distribution_impl_b(f, p);
   
       unreachable();
   }
   
   }
   
   
   inline product_distribution_ret_t<std::unique_ptr<distribution1d_t>>
       product_distribution(const distribution1d_t* f,
                            const distribution1d_t* g) {
       if (auto p = dynamic_cast<const discrete_distribution_t<vec2_t>*>(f); p)
           return detail::product_distribution_impl_a(p, g);
       if (auto p = dynamic_cast<const uniform_distribution_t*>(f); p)
           return detail::product_distribution_impl_a(p, g);
       if (auto p = dynamic_cast<const piecewise_linear_distribution_t*>(f); p)
           return detail::product_distribution_impl_a(p, g);
       if (auto p = dynamic_cast<const binned_piecewise_linear_distribution_t*>(f); p)
           return detail::product_distribution_impl_a(p, g);
       if (auto p = dynamic_cast<const gaussian1d_t*>(f); p)
           return detail::product_distribution_impl_a(p, g);
       if (auto p = dynamic_cast<const truncated_gaussian1d_t*>(f); p)
           return detail::product_distribution_impl_a(p, g);
   
       unreachable();
   }
   
   }
