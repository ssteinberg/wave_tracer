
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_integrator_integrator.hpp:

Program Listing for File integrator.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_integrator_integrator.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/integrator/integrator.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/wt_context.hpp>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/sampler/sampler.hpp>
   #include <wt/ads/ads.hpp>
   
   #include <wt/sensor/block/block.hpp>
   #include <wt/sensor/sensor_sample.hpp>
   #include <wt/sensor/sensor_flags.hpp>
   
   namespace wt::integrator {
   
   struct integrator_context_t;
   
   class integrator_t : public scene::scene_element_t {
   public:
       static constexpr std::string scene_element_class() noexcept { return "integrator"; }
   
   public:
       integrator_t(std::string id) : scene_element_t(std::move(id)) {}
       integrator_t(integrator_t&&) = default;
       virtual ~integrator_t() noexcept = default;
   
       [[nodiscard]] virtual sensor::sensor_write_flags_e sensor_write_flags() const noexcept = 0;
   
       virtual void integrate(const integrator_context_t& ctx,
                              const sensor::block_handle_t& block,
                              const vec3u32_t& sensor_element,
                              std::uint32_t samples_per_element) const noexcept = 0;
   
   public:
       static std::shared_ptr<integrator_t> load(
               const std::string& id, 
               scene::loader::loader_t* loader, 
               const scene::loader::node_t& node, 
               const wt::wt_context_t &context);
   };
   
   }
   
   #include "integrator_context.hpp"
