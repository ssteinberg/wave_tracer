
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_analytic.hpp:

Program Listing for File complex_analytic.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_analytic.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/complex_analytic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   
   #include <wt/scene/element/scene_element.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/range.hpp>
   
   #include <wt/util/unique_function.hpp>
   
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::spectrum {
   
   class complex_analytic_t final : public spectrum_t {
   private:
       range_t<wavenumber_t> range;
       unique_function<c_t(wavenumber_t) const noexcept> func;
       std::string func_description;
   
   public:
       complex_analytic_t(std::string id, 
                          range_t<wavenumber_t> range,
                          std::regular_invocable<wavenumber_t> auto f,
                          std::string func_description)
           : spectrum_t(std::move(id)),
             range(range), func(std::move(f)), func_description(std::move(func_description))
       {}
       complex_analytic_t(complex_analytic_t&&) = default;
   
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override {
           return range;
       }
       
       [[nodiscard]] c_t value(const wavenumber_t wavenumber) const noexcept override {
           return range.contains(wavenumber) ? func(wavenumber) : 0;
       }
       
   public:
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
