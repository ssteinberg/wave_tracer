
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_format_chrono.hpp:

Program Listing for File chrono.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_format_chrono.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/util/format/chrono.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <utility>
   #include <chrono>
   
   namespace wt::format::chrono {
   
   template <typename T>
   struct is_duration {
       static constexpr bool value = false;
   };
   template <typename Rep, typename Period>
   struct is_duration<std::chrono::duration<Rep, Period>> {
       static constexpr bool value = true;
   };
   template <typename Rep, typename Period>
   struct is_duration<const std::chrono::duration<Rep, Period>> {
       static constexpr bool value = true;
   };
   template <typename Rep, typename Period>
   struct is_duration<volatile std::chrono::duration<Rep, Period>> {
       static constexpr bool value = true;
   };
   template <typename Rep, typename Period>
   struct is_duration<const volatile std::chrono::duration<Rep, Period>> {
       static constexpr bool value = true;
   };
   template <typename T>
   constexpr inline auto is_duration_v = is_duration<T>::value;
   
   
   template <typename Duration, typename Rep, typename Period>
       requires (is_duration_v<Duration>)
   constexpr inline auto extract_duration(const std::chrono::duration<Rep, Period>& duration) noexcept {
       const auto d = floor<Duration>(duration);
       return std::make_pair( d.count(), duration-d );
   }
   
   }
