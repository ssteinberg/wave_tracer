
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_diffuse.hpp:

Program Listing for File diffuse.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_diffuse.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/bsdf/diffuse.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    * wave tracer
    * Copyright  Shlomi Steinberg
    *
    * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
    *
    */
   
   #pragma once
   
   #include <string>
   
   #include <wt/texture/texture.hpp>
   #include <wt/wt_context.hpp>
   
   #include "bsdf.hpp"
   
   namespace wt::bsdf {
   
   class diffuse_t final : public bsdf_t {
   private:
       std::shared_ptr<texture::texture_t> refl;
   
   public:
       diffuse_t(std::string id, std::shared_ptr<texture::texture_t> reflectance)
           : bsdf_t(std::move(id)), refl(std::move(reflectance)) {}
       diffuse_t(diffuse_t &&) = default;
   
       [[nodiscard]] inline std::optional<f_t> albedo(const wavenumber_t k) const noexcept override {
           return refl->mean_value(k);
       }
       
       [[nodiscard]] lobe_mask_t lobes(wavenumber_t k) const noexcept override {
           lobe_mask_t lobes{};
           lobes.set(0);
           return lobes;
       }
   
       [[nodiscard]] inline bool is_delta_only(const wavenumber_t k) const noexcept override {
           return false;
       }
       
       [[nodiscard]] inline bool is_delta_lobe(wavenumber_t k, std::uint32_t lobe) const noexcept override {
           return false;
       }
   
       [[nodiscard]] inline bool needs_interaction_footprint() const noexcept override {
           return refl->needs_interaction_footprint();
       }
   
       [[nodiscard]] bsdf_result_t f(
               const dir3_t &wi, 
               const dir3_t &wo,
               const bsdf_query_t &query) const noexcept override;
   
       [[nodiscard]] std::optional<bsdf_sample_t> sample(
               const dir3_t &wi, 
               const bsdf_query_t &query,
               sampler::sampler_t &sampler) const noexcept override;
   
       [[nodiscard]] solid_angle_density_t pdf(
               const dir3_t &wi, const dir3_t &wo,
               const bsdf_query_t &query) const noexcept override;
   
       [[nodiscard]] f_t eta(const dir3_t &wi, const dir3_t &wo,
                             const wavenumber_t k) const noexcept override {
           return 1;
       }
   
       [[nodiscard]] scene::element::info_t description() const override;
   
   public:
       static std::unique_ptr<bsdf_t> load(std::string id, scene::loader::loader_t* loader,
                                           const scene::loader::node_t& node,
                                           const wt::wt_context_t &context);
   };
   
   } // namespace wt::bsdf
