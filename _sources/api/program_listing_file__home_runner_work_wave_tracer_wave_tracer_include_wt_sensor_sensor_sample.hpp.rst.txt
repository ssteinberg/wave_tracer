
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_sensor_sample.hpp:

Program Listing for File sensor_sample.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_sensor_sample.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/sensor/sensor_sample.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <optional>
   
   #include <wt/sampler/density.hpp>
   
   #include <wt/beam/beam.hpp>
   #include <wt/interaction/intersection.hpp>
   
   #include <wt/math/common.hpp>
   
   namespace wt {
   
   namespace sensor {
   
   class sensor_t;
   
   struct sensor_element_sample_t {
       vec3u32_t element;
       vec3_t offset;
   };
   
   }
   
   struct sensor_direct_sample_t {
       const sensor::sensor_t* sensor;
   
       importance_beam_t beam;
   
       solid_angle_sampling_pd_t dpd;
   
       sensor::sensor_element_sample_t element;
   
       std::optional<intersection_surface_t> surface;
   };
   
   struct sensor_direct_connection_t {
       importance_beam_t beam;
   
       sensor::sensor_element_sample_t element;
   
       std::optional<intersection_surface_t> surface;
   };
   
   struct sensor_sample_t {
       const sensor::sensor_t* sensor;
   
       importance_flux_beam_t beam;
   
       area_sampling_pd_t ppd;
       solid_angle_sampling_pd_t dpd;
   
       sensor::sensor_element_sample_t element;
   
       std::optional<intersection_surface_t> surface;
   };
   
   }
