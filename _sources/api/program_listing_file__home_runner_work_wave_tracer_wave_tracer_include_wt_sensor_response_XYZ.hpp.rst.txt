
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_response_XYZ.hpp:

Program Listing for File XYZ.hpp
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_response_XYZ.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/sensor/response/XYZ.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/spectrum/spectrum.hpp>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/wt_context.hpp>
   #include <wt/math/common.hpp>
   
   #include <wt/sensor/response/response.hpp>
   #include <wt/sensor/response/tonemap/tonemap.hpp>
   #include <wt/sensor/response/multichannel.hpp>
   
   namespace wt::sensor::response {
   
   class XYZ_t final : public response_t {
   private:
       multichannel_t response;
   
   public:
       XYZ_t(std::string id,
             const wt::wt_context_t &context);
       XYZ_t(XYZ_t&&) = default;
       virtual ~XYZ_t() noexcept = default;
   
       [[nodiscard]] bitmap::pixel_layout_t pixel_layout() const noexcept override {
           return bitmap::pixel_layout_t{ 3 };
       }
   
       [[nodiscard]] const auto* channel(std::uint16_t channel) const noexcept {
           return response.channel(channel);
       }
       
       [[nodiscard]] const f_t f(
               std::uint32_t channel, 
               const wavenumber_t& k) const noexcept override {
           return response.f(channel, k);
       }
       
       [[nodiscard]] const spectrum::spectrum_real_t& sensitivity() const noexcept override { return response.sensitivity(); }
   
   public:
       static std::unique_ptr<response_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
