
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_response_multichannel.hpp:

Program Listing for File multichannel.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_response_multichannel.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/sensor/response/multichannel.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <vector>
   #include <memory>
   
   #include <wt/interaction/polarimetric/stokes.hpp>
   #include <wt/spectrum/spectrum.hpp>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/wt_context.hpp>
   #include <wt/math/common.hpp>
   
   #include <wt/sensor/response/response.hpp>
   
   namespace wt::sensor::response {
   
   class multichannel_t final : public response_t {
   private:
       std::vector<std::shared_ptr<spectrum::spectrum_real_t>> channels;
       std::unique_ptr<spectrum::spectrum_real_t> sensitivity_spectrum;
   
   public:
       multichannel_t(std::string id, 
                      std::vector<std::shared_ptr<spectrum::spectrum_real_t>> channels);
       multichannel_t(multichannel_t&&) = default;
       virtual ~multichannel_t() noexcept = default;
   
       [[nodiscard]] bitmap::pixel_layout_t pixel_layout() const noexcept override {
           return bitmap::pixel_layout_t{ std::uint8_t(channels.size()) };
       }
   
       [[nodiscard]] const auto* channel(std::uint16_t channel) const noexcept { return channels[channel].get(); }
       
       [[nodiscard]] const f_t f(
               std::uint32_t channel,
               const wavenumber_t& k) const noexcept override {
           assert(channel<channels.size());
           return channel<channels.size() ? channels[channel]->f(k) : 0;
       }
       
       [[nodiscard]] const spectrum::spectrum_real_t& sensitivity() const noexcept override { return *sensitivity_spectrum; }
   
   public:
       static std::unique_ptr<response_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
