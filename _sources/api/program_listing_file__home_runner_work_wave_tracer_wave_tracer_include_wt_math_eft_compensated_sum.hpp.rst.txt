
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_eft_compensated_sum.hpp:

Program Listing for File compensated_sum.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_eft_compensated_sum.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/math/eft/compensated_sum.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <wt/math/defs.hpp>
   #include <wt/util/concepts.hpp>
   
   namespace wt::m::eft {
   
   template <Scalar T>
   struct compensated_fp_t {
       T val, err={};
   
       constexpr compensated_fp_t(T val) noexcept : val(val) {}
       constexpr compensated_fp_t(const compensated_fp_t&) noexcept = default;
       constexpr compensated_fp_t& operator=(const compensated_fp_t&) noexcept = default;
       constexpr compensated_fp_t& operator=(const T& f) noexcept { val=f; err=0; return *this; }
   
       template <Scalar S>
       constexpr auto& operator+=(S f) noexcept {
           const auto delta = f - err;
           const auto ns = val + delta;
           err = (ns - val) - delta;
           val = ns;
           return *this;
       }
       template <Scalar S>
       constexpr auto operator+(S f) noexcept {
           const auto delta = f - err;
           compensated_fp_t ret{ val + delta };
           ret.err = (ret.val - val) - delta;
           return ret;
       }
   
       constexpr explicit operator T() const noexcept { return val; }
   };
   
   }
