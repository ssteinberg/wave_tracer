
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_complex.hpp:

Program Listing for File complex.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_complex.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/complex.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   #include <optional>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/texture/texture.hpp>
   #include <wt/spectrum/spectrum.hpp>
   
   #include <wt/interaction/intersection.hpp>
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::texture {
   
   class complex_t : public scene::scene_element_t {
   public:
       static constexpr std::string scene_element_class() noexcept { return "texture_complex"; }
   
   public:
       complex_t(std::string id)
           : scene_element_t(std::move(id))
       {}
       complex_t(complex_t&&) = default;
       virtual ~complex_t() noexcept = default;
       
       [[nodiscard]] virtual bool needs_interaction_footprint() const noexcept = 0;
       
       [[nodiscard]] virtual vec2_t resolution() const noexcept = 0;
       
       [[nodiscard]] inline bool is_constant() const noexcept { return resolution()==vec2_t{ 1,1 }; }
   
       [[nodiscard]] virtual std::shared_ptr<spectrum::spectrum_t> mean_spectrum() const noexcept = 0;
   
       [[nodiscard]] virtual std::optional<c_t> mean_value(wavenumber_t k) const noexcept = 0;
   
       [[nodiscard]] virtual c_t f(const texture_query_t& query) const noexcept = 0;
       
   public:
       static std::shared_ptr<complex_t> load(
               std::string id, 
               scene::loader::loader_t* loader, 
               const scene::loader::node_t& node, 
               const wt::wt_context_t &context);
   };
   
   }
