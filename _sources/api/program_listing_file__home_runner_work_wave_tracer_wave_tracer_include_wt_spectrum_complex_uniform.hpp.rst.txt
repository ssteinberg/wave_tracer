
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_uniform.hpp:

Program Listing for File complex_uniform.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_uniform.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/complex_uniform.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   
   #include <wt/scene/element/scene_element.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/range.hpp>
   
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::spectrum {
   
   class complex_uniform_t final : public spectrum_t {
   private:
       c_t val;
       range_t<wavenumber_t> krange;
   
   public:
       complex_uniform_t(std::string id,
                         c_t val, 
                         const range_t<wavenumber_t> krange = range_t<wavenumber_t>::positive())
           : spectrum_t(std::move(id)),
             val(val),
             krange(krange)
       {}
       complex_uniform_t(const complex_uniform_t&) = default;
       complex_uniform_t(complex_uniform_t&&) = default;
       virtual ~complex_uniform_t() noexcept = default;
       
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override {
           return krange;
       }
       
       [[nodiscard]] c_t value(const wavenumber_t wavenumber) const noexcept override {
           return krange.contains(wavenumber) ? val : c_t{ 0 };
       }
   
   public:
       static std::unique_ptr<spectrum_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
