
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_analytic.hpp:

Program Listing for File analytic.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_analytic.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/analytic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <functional>
   
   #include <wt/sampler/sampler.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/distribution/uniform_distribution.hpp>
   
   #include <wt/util/unique_function.hpp>
   
   #include "spectrum.hpp"
   
   namespace wt::spectrum {
   
   class analytic_t final : public spectrum_real_t {
   private:
       range_t<wavenumber_t> range;
       unique_function<f_t(wavenumber_t) const noexcept> func;
       std::string func_description;
   
   public:
       analytic_t(std::string id, 
                  range_t<wavenumber_t> range,
                  std::regular_invocable<wavenumber_t> auto f,
                  std::string func_description)
           : spectrum_real_t(std::move(id)),
             range(range), func(std::move(f)), func_description(std::move(func_description))
       {}
       analytic_t(analytic_t&&) = default;
   
       [[nodiscard]] const distribution1d_t* distribution() const noexcept override {
           // not supported
           assert(false);
           return nullptr;
       }
   
       [[nodiscard]] f_t power() const noexcept override {
           // not supported
           assert(false);
           return 0;
       }
   
       [[nodiscard]] f_t power(const range_t<wavenumber_t>& wavenumbers) const noexcept override {
           // not supported
           assert(false);
           return 0;
       }
   
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override {
           return range;
       }
       
       [[nodiscard]] wavenumber_t mean_wavenumber() const noexcept override { return range.centre(); }
       
       [[nodiscard]] f_t f(const wavenumber_t wavenumber) const noexcept override {
           return range.contains(wavenumber) ? func(wavenumber) : 0;
       }
       
   public:
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
