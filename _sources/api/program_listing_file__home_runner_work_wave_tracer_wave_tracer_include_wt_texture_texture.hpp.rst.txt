
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_texture.hpp:

Program Listing for File texture.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_texture.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/texture.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   #include <optional>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/interaction/common.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::texture {
   
   struct texture_query_t {
       vec2_t uv;
   
       // wavenumber
       wavenumber_t k;
   
       intersection_uv_pdvs_t pdvs;
   };
   
   class texture_t : public scene::scene_element_t {
   public:
       static constexpr std::string scene_element_class() noexcept { return "texture"; }
   
   public:
       texture_t(std::string id) 
           : scene_element_t(std::move(id))
       {}
       texture_t(texture_t&&) = default;
       virtual ~texture_t() noexcept = default;
       
       [[nodiscard]] virtual bool needs_interaction_footprint() const noexcept { return false; }
       
       [[nodiscard]] virtual vec2_t resolution() const noexcept = 0;
       
       [[nodiscard]] inline bool is_constant() const noexcept { return resolution()==vec2_t{ 1,1 }; }
   
       [[nodiscard]] virtual std::shared_ptr<spectrum::spectrum_real_t> mean_spectrum() const noexcept = 0;
   
       [[nodiscard]] virtual std::optional<f_t> mean_value(wavenumber_t k) const noexcept = 0;
   
       [[nodiscard]] virtual vec4_t get_RGBA(const texture_query_t& query) const noexcept = 0;
   
       [[nodiscard]] virtual vec2_t f(const texture_query_t& query) const noexcept = 0;
       
   public:
       static std::shared_ptr<texture_t> load(std::string id, 
                                              scene::loader::loader_t* loader, 
                                              const scene::loader::node_t& node, 
                                              const wt::wt_context_t &context);
   };
   
   }
