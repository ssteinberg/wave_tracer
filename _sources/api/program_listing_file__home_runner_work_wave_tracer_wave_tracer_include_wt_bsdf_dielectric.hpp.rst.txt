
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_dielectric.hpp:

Program Listing for File dielectric.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_dielectric.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/bsdf/dielectric.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/interaction/fresnel.hpp>
   
   #include <wt/wt_context.hpp>
   
   #include "bsdf.hpp"
   
   namespace wt::bsdf {
   
   class dielectric_t final : public bsdf_t {
   private:
       std::shared_ptr<spectrum::spectrum_t> extIOR;
       std::shared_ptr<spectrum::spectrum_t> IORn;
   
       std::shared_ptr<spectrum::spectrum_real_t> reflection_scale;
       std::shared_ptr<spectrum::spectrum_real_t> transmission_scale;
   
   public:
       dielectric_t(std::string id, 
                    std::shared_ptr<spectrum::spectrum_t> extIOR,
                    std::shared_ptr<spectrum::spectrum_t> IOR,
                    std::shared_ptr<spectrum::spectrum_real_t>&& reflection_scale,
                    std::shared_ptr<spectrum::spectrum_real_t>&& transmission_scale)
           : bsdf_t(std::move(id)), 
             extIOR(std::move(extIOR)),
             IORn(std::move(IOR)),
             reflection_scale(std::move(reflection_scale)),
             transmission_scale(std::move(transmission_scale))
       {}
       dielectric_t(dielectric_t&&) = default;
   
       [[nodiscard]] inline auto IOR(const wavenumber_t k) const noexcept {
           const auto eta_1 = extIOR->value(k);
           const auto eta_2 = IORn->value(k);
           assert((eta_1/eta_2).imag()<1e-3);
           return (eta_1/eta_2).real();
       }
   
       [[nodiscard]] inline auto reflectivity_scale(const wavenumber_t& k) const noexcept {
           return reflection_scale ? reflection_scale->f(k) : 1;
       }
       [[nodiscard]] inline auto transmissivity_scale(const wavenumber_t& k) const noexcept {
           return transmission_scale ? transmission_scale->f(k) : 1;
       }
   
       [[nodiscard]] inline std::optional<f_t> albedo(const wavenumber_t k) const noexcept override {
           const auto f = fresnel(IOR(k), { 0,0,1 });
           return (std::norm(f.rs)+std::norm(f.rp))/2 * reflectivity_scale(k);
       }
       
       [[nodiscard]] lobe_mask_t lobes(wavenumber_t k) const noexcept override {
           lobe_mask_t lobes{};
           lobes.set(0);
           return lobes;
       }
       
       [[nodiscard]] inline bool is_delta_only(wavenumber_t k) const noexcept override { return true; }
       
       [[nodiscard]] inline bool is_delta_lobe(wavenumber_t k, std::uint32_t lobe) const noexcept override {
           return true;
       }
   
       [[nodiscard]] bsdf_result_t f(
               const dir3_t &wi,
               const dir3_t &wo,
               const bsdf_query_t& query) const noexcept override {
           return bsdf_result_t{};
       }
   
       [[nodiscard]] std::optional<bsdf_sample_t> sample(
               const dir3_t &wi,
               const bsdf_query_t& query, 
               sampler::sampler_t& sampler) const noexcept override;
       
       [[nodiscard]] solid_angle_density_t pdf(
               const dir3_t &wi,
               const dir3_t &wo,
               const bsdf_query_t& query) const noexcept override {
           return solid_angle_density_t{};
       }
   
       [[nodiscard]] f_t eta(
               const dir3_t &wi,
               const dir3_t &wo,
               const wavenumber_t k) const noexcept override {
           const auto eta_1 = std::real(extIOR->value(k));
           const auto eta_2 = std::real(IORn->value(k));
   
           return wi.z>=0 ? eta_1/eta_2 : eta_2/eta_1;
       }
   
       [[nodiscard]] scene::element::info_t description() const override;
   
   public:
       static std::unique_ptr<bsdf_t> load(std::string id, scene::loader::loader_t* loader, const scene::loader::node_t& node, const wt::wt_context_t &context);
   };
   
   }
