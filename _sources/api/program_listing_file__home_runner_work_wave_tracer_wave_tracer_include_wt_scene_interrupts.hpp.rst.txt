
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_scene_interrupts.hpp:

Program Listing for File interrupts.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_scene_interrupts.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/scene/interrupts.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <functional>
   #include "render_results.hpp"
   
   namespace wt::scene::interrupts {
   
   class interrupt_t {
   public:
       virtual ~interrupt_t() = 0;
   };
   inline interrupt_t::~interrupt_t() {}
   
   class terminate_t final : public interrupt_t {
   public:
       ~terminate_t() noexcept = default;
   };
   
   class pause_t final : public interrupt_t {
   public:
       ~pause_t() noexcept = default;
   };
   
   class resume_t final : public interrupt_t {
   public:
       ~resume_t() noexcept = default;
   };
   
   class capture_intermediate_t final : public interrupt_t {
   public:
       using callback_t = std::function<void(render_result_t)>;
   
   private:
       callback_t callback;
   
   public:
       capture_intermediate_t(callback_t callback) : callback(std::move(callback)) {}
       ~capture_intermediate_t() noexcept = default;
   
       inline void operator()(render_result_t results) const {
           callback(std::move(results));
       }
   };
   
   }
