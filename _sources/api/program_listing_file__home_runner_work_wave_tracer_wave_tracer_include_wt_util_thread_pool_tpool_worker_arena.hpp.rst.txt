
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_thread_pool_tpool_worker_arena.hpp:

Program Listing for File tpool_worker_arena.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_thread_pool_tpool_worker_arena.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/util/thread_pool/tpool_worker_arena.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <cassert>
   #include <vector>
   
   #include <wt/util/thread_pool/utils.hpp>
   
   namespace wt::thread_pool {
   
   template <typename T>
   class tpool_worker_arena_t {
       friend class tpool_t;
   
   private:
       using arenas_t = std::vector<T>;    
       arenas_t arenas;
   
   private:
       inline tpool_worker_arena_t(std::size_t count) noexcept : arenas(count) {}
       inline tpool_worker_arena_t(std::size_t count, const T& t) noexcept : arenas(count, t) {}
   
   public:
       tpool_worker_arena_t() = delete;
   
       [[nodiscard]] inline auto& get() noexcept {
           assert(is_this_thread_tpool_worker());
   
           const auto tid = tpool_worker_tid();
           return arenas[tid];
       }
       [[nodiscard]] inline const auto& get() const noexcept {
           assert(is_this_thread_tpool_worker());
   
           const auto tid = tpool_worker_tid();
           return arenas[tid];
       }
   
       [[nodiscard]] inline const auto& operator[](std::size_t idx) const noexcept { return arenas[idx]; }
   
       [[nodiscard]] inline auto size() const noexcept { return arenas.size(); }
   
       [[nodiscard]] inline auto begin() const noexcept { return arenas.begin(); }
       [[nodiscard]] inline auto end() const noexcept { return arenas.end(); }
       [[nodiscard]] inline auto rbegin() const noexcept { return arenas.rbegin(); }
       [[nodiscard]] inline auto rend() const noexcept { return arenas.rend(); }
       [[nodiscard]] inline auto cbegin() const noexcept { return arenas.cbegin(); }
       [[nodiscard]] inline auto cend() const noexcept { return arenas.cend(); }
       [[nodiscard]] inline auto crbegin() const noexcept { return arenas.crbegin(); }
       [[nodiscard]] inline auto crend() const noexcept { return arenas.crend(); }
   };
   
   }
