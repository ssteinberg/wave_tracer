
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_function.hpp:

Program Listing for File function.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_function.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/function.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <vector>
   #include <memory>
   #include <functional>
   
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   #include <wt/util/unique_function.hpp>
   
   #include <wt/texture/texture.hpp>
   
   namespace wt::texture {
   
   class function_t final : public texture_t {
   public:
       using tex_container_t = std::vector<std::shared_ptr<texture_t>>;
       using func_t = unique_function<f_t(
               const tex_container_t&,
               const texture_query_t&,
               const vec2_t&,         // uv
               const wavenumber_t     // k
           ) const noexcept>;
   
   private:
       func_t func;
       std::string func_description;
   
       tex_container_t texs;
   
       [[nodiscard]] inline f_t eval_func(const texture_query_t& query) const {
           return func(texs,
                       query,
                       query.uv,
                       query.k);
       }
   
   public:
       function_t(std::string id,
                  tex_container_t&& texs,
                  func_t&& func,
                  std::string func_description)
           : texture_t(std::move(id)),
             func(std::move(func)),
             func_description(std::move(func_description)),
             texs(std::move(texs))
       {}
       function_t(std::string id,
                  func_t&& func,
                  std::string func_description)
           : function_t(std::move(id), {}, std::move(func), std::move(func_description))
       {}
       function_t(function_t&&) = default;
       virtual ~function_t() noexcept = default;
       
       [[nodiscard]] bool needs_interaction_footprint() const noexcept override {
           for (const auto& t : texs)
               if (t->needs_interaction_footprint())
                   return true;
           return false;
       }
       
       [[nodiscard]] vec2_t resolution() const noexcept override {
           auto res = vec2_t{ 1 };
           for (const auto& t : texs)
               res = m::max(res, t->resolution());
           return res;
       }
   
       [[nodiscard]] std::shared_ptr<spectrum::spectrum_real_t> mean_spectrum() const noexcept override {
           // not implemented
           return nullptr;
       }
   
       [[nodiscard]] std::optional<f_t> mean_value(wavenumber_t k) const noexcept override {
           return std::nullopt;
       }
   
       [[nodiscard]] vec4_t get_RGBA(const texture_query_t& query) const noexcept override {
           // not implemented
           assert(false);
           return {};
       }
   
       [[nodiscard]] vec2_t f(const texture_query_t& query) const noexcept override {
           return vec2_t{
               eval_func(query),
               1
           };
       }
       
   public:
       static std::unique_ptr<texture_t> load(std::string id, 
                                              scene::loader::loader_t* loader, 
                                              const scene::loader::node_t& node, 
                                              const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
