
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_shapes_ray.hpp:

Program Listing for File ray.hpp
================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_shapes_ray.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/math/shapes/ray.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <wt/math/common.hpp>
   #include <wt/math/frame.hpp>
   #include <wt/math/shapes/aabb.hpp>
   
   #include <wt/util/assert.hpp>
   
   namespace wt {
   
   struct ray_t {
       pqvec3_t o;       // origin
       dir3_t d;        // direction
   
       // precomputed auxiliary values
       vec3_t invd;
   
       constexpr ray_t(const pqvec3_t& origin,
                       const dir3_t& direction)
           : o(origin),
             d(direction),
             invd(f_t(1)/direction)
       {}
       constexpr ray_t(const ray_t&) = default;
       ray_t& operator=(const ray_t&) = default;
   
       [[nodiscard]] inline auto propagate(const length_t dist) const noexcept {
           return o + dist*d;
       }
   };
   
   }
