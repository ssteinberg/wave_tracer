
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_norm_integers.hpp:

Program Listing for File norm_integers.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_math_norm_integers.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/math/norm_integers.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <concepts>
   
   #include <wt/math/common.hpp>
   
   namespace wt::m {
   
   template<std::unsigned_integral T>
   [[nodiscard]] inline auto unorm_to_fp(T x) noexcept {
       return m::clamp<f_t>(
           f_t(x) / f_t(limits<T>::max()),
           0, 1);
   }
   template<std::signed_integral T>
   [[nodiscard]] inline auto snorm_to_fp(T x) noexcept {
       return m::clamp<f_t>(
           f_t(x) / f_t(limits<T>::max()),
           -1, 1);
   }
   
   template<std::unsigned_integral T>
   [[nodiscard]] inline auto fp_to_unorm(f_t x) noexcept {
       x = m::clamp<f_t>(x,0,1);
       return T(m::min<f_t>(m::round(x * limits<T>::max()), 
                            limits<T>::max()-f_t(.5)));
   }
   template<std::signed_integral T>
   [[nodiscard]] inline auto fp_to_snorm(f_t x) noexcept {
       x = m::clamp<f_t>(x,-1,1);
       return T(m::clamp<f_t>(m::round(x * limits<T>::max()), 
                              limits<T>::min()+f_t(.5),
                              limits<T>::max()-f_t(.5)));
   }
   
   }
