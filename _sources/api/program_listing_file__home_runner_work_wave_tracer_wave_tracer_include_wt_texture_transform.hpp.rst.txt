
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_transform.hpp:

Program Listing for File transform.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_transform.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/transform.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/wt_context.hpp>
   #include <wt/math/common.hpp>
   #include <wt/math/transform/transform.hpp>
   
   #include <wt/texture/texture.hpp>
   
   #include <wt/util/assert.hpp>
   
   namespace wt::texture {
   
   class transform_t final : public texture_t {
   private:
       std::shared_ptr<texture_t> tex;
       mat2_t M;
       vec2_t translate;
   
   private:
       [[nodiscard]] auto transform_query(const texture_query_t& query) const noexcept {
           // transform uv
           const auto uv = M*query.uv + translate;
   
           // new query
           auto q = texture_query_t{
               .uv = uv,
               .k = query.k,
           };
   
           // transform uv pdvs
           if (needs_interaction_footprint()) {
               const auto duvda = M * vec2_t{ query.pdvs.duda, query.pdvs.dvda };
               const auto duvdb = M * vec2_t{ query.pdvs.dudb, query.pdvs.dvdb };
   
               q.pdvs.duda = duvda.x;
               q.pdvs.dudb = duvdb.x;
               q.pdvs.dvda = duvda.y;
               q.pdvs.dvdb = duvdb.y;
           }
   
           return q;
       }
   
   public:
       transform_t(std::string id, 
                   std::shared_ptr<texture_t> tex, 
                   const mat2_t& M,
                   const vec2_t translate)
           : texture_t(std::move(id)),
             tex(std::move(tex)),
             M(M),
             translate(translate)
       {
           assert_isnotzero(m::determinant(M));
       }
       transform_t(transform_t&&) = default;
       virtual ~transform_t() noexcept = default;
   
       [[nodiscard]] inline const auto* get_nested_texture() const noexcept {
           return tex.get();
       }
       
       [[nodiscard]] bool needs_interaction_footprint() const noexcept override {
           return tex->needs_interaction_footprint();
       }
       
       [[nodiscard]] vec2_t resolution() const noexcept override {
           const auto r = m::max(vec2_t{ 1 }, tex->resolution());
           const auto rr = M * (f_t(1)/r);
   
           return m::max(vec2_t{ 1 }, f_t(1)/rr);
       }
   
       [[nodiscard]] std::shared_ptr<spectrum::spectrum_real_t> mean_spectrum() const noexcept override {
           return tex->mean_spectrum();
       }
   
       [[nodiscard]] std::optional<f_t> mean_value(wavenumber_t k) const noexcept override {
           return tex->mean_value(k);
       }
   
       [[nodiscard]] vec4_t get_RGBA(const texture_query_t& query) const noexcept override {
           return tex->get_RGBA(transform_query(query));
       }
   
       [[nodiscard]] vec2_t f(const texture_query_t& query) const noexcept override {
           return tex->f(transform_query(query));
       }
       
   public:
       static std::unique_ptr<texture_t> load(std::string id, 
                                              scene::loader::loader_t* loader, 
                                              const scene::loader::node_t& node, 
                                              const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
