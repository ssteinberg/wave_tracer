
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_sensor_virtual_sensor.hpp:

Program Listing for File virtual_sensor.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_sensor_sensor_virtual_sensor.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/sensor/sensor/virtual_sensor.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <optional>
   
   #include <wt/sensor/sensor_sample.hpp>
   #include <wt/beam/beam.hpp>
   #include <wt/math/range.hpp>
   
   namespace wt::sensor {
   
   class virtual_coverage_sensor_t {
   public:
       virtual_coverage_sensor_t() noexcept = default;
       virtual_coverage_sensor_t(virtual_coverage_sensor_t&&) = default;
   
       [[nodiscard]] virtual std::optional<sensor_direct_connection_t> Si(
               const spectral_radiant_flux_beam_t& beam,
               const pqrange_t<>& range) const noexcept = 0;
       
       [[nodiscard]] virtual vec3u32_t sensor_elements() const noexcept = 0;
   
       [[nodiscard]] virtual pqvec3_t position_for_element(const sensor::sensor_element_sample_t& element) const noexcept = 0;
   
       [[nodiscard]] virtual sensor::sensor_element_sample_t element_for_position(const pqvec3_t& wp) const noexcept = 0;
   };
   
   }
