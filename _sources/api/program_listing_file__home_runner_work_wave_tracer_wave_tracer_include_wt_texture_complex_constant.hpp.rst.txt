
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_complex_constant.hpp:

Program Listing for File complex_constant.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_complex_constant.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/complex_constant.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/texture/complex.hpp>
   #include <wt/spectrum/spectrum.hpp>
   
   #include <wt/interaction/intersection.hpp>
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::texture {
   
   class complex_constant_t final : public complex_t {
   private:
       std::shared_ptr<spectrum::spectrum_t> spectrum;
   
   public:
       complex_constant_t(std::string id,
                          std::shared_ptr<spectrum::spectrum_t>&& spectrum)
           : complex_t(std::move(id)),
             spectrum(std::move(spectrum))
       {}
       complex_constant_t(complex_constant_t&&) = default;
       virtual ~complex_constant_t() noexcept = default;
       
       [[nodiscard]] bool needs_interaction_footprint() const noexcept override {
           return false;
       }
       
       [[nodiscard]] vec2_t resolution() const noexcept override {
           return vec2_t{ 1 };
       }
   
       [[nodiscard]] std::shared_ptr<spectrum::spectrum_t> mean_spectrum() const noexcept override {
           return spectrum;
       }
   
       [[nodiscard]] std::optional<c_t> mean_value(wavenumber_t k) const noexcept override {
           return spectrum->value(k);
       }
   
       [[nodiscard]] c_t f(const texture_query_t& query) const noexcept override {
           return spectrum->value(query.k);
       }
       
   public:
       static std::shared_ptr<complex_t> load(
               std::string id, 
               scene::loader::loader_t* loader, 
               const scene::loader::node_t& node, 
               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
