
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_gaussian.hpp:

Program Listing for File gaussian.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_gaussian.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/gaussian.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/sampler/sampler.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/distribution/truncated_gaussian1d.hpp>
   #include <wt/wt_context.hpp>
   
   #include "spectrum.hpp"
   
   namespace wt::spectrum {
   
   class gaussian_t final : public spectrum_real_t {
   private:
       truncated_gaussian1d_t dist;
       f_t val0, recp_g0;
       const range_t<wavenumber_t> range;
   
   public:
       gaussian_t(std::string id, 
                  const truncated_gaussian1d_t& dist,
                  const f_t val0,
                  const range_t<wavenumber_t>& range)
           : spectrum_real_t(std::move(id)),
             dist(dist),
             val0(val0),
             recp_g0(val0 / dist.pdf(dist.mean())),
             range(range)
       {
           assert(!dist.is_dirac());
       }
       gaussian_t(const gaussian_t&) = default;
       gaussian_t(gaussian_t&&) = default;
   
       [[nodiscard]] const distribution1d_t* distribution() const noexcept override {
           return &dist;
       }
   
       [[nodiscard]] f_t power() const noexcept override {
           return power(range);
       }
   
       [[nodiscard]] f_t power(const range_t<wavenumber_t>& wavenumbers) const noexcept override {
           const auto r = range_t{ 
               m::max<f_t>(0,u::to_inv_mm(wavenumbers.min)), 
               u::to_inv_mm(wavenumbers.max)
           };
   
           if (dist.is_dirac())
               return r.contains(dist.mean()) ? val0 : 0;
           return recp_g0 * dist.integrate(r);
       }
   
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override {
           return range;
       }
       
       [[nodiscard]] wavenumber_t mean_wavenumber() const noexcept override {
           return dist.mean() / u::mm;
       }
       
       [[nodiscard]] f_t f(const wavenumber_t wavenumber) const noexcept override {
           const auto x = u::to_inv_mm(wavenumber);
   
           if (dist.is_dirac())
               return x == dist.mean() ? val0 : 0;
           return x>0 ?
               recp_g0 * dist.pdf(x) : 
               0;
       }
       
   public:
       static std::unique_ptr<spectrum_real_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
