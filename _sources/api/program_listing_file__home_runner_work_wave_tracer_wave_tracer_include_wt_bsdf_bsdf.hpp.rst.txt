
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_bsdf.hpp:

Program Listing for File bsdf.hpp
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_bsdf_bsdf.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/bsdf/bsdf.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   #include <optional>
   
   #include <wt/math/common.hpp>
   #include <wt/sampler/measure.hpp>
   
   #include <wt/scene/element/scene_element.hpp>
   #include <wt/sampler/sampler.hpp>
   
   #include <wt/wt_context.hpp>
   
   #include "common.hpp"
   
   namespace wt::bsdf {
   
   class bsdf_t : public scene::scene_element_t {
   public:
       static constexpr std::string scene_element_class() noexcept { return "bsdf"; }
   
   public:
       bsdf_t(std::string id) : scene_element_t(std::move(id)) {}
       bsdf_t(bsdf_t&&) = default;
       virtual ~bsdf_t() noexcept = default;
   
       [[nodiscard]] virtual frame_t shading_frame(
               const texture::texture_query_t& tquery,
               const mesh::surface_differentials_t& tangent_frame,
               const dir3_t& ns) const noexcept {
           return frame_t::build_shading_frame(ns, tangent_frame.dpdu);
       }
   
       [[nodiscard]] virtual std::optional<f_t> albedo(wavenumber_t k) const noexcept = 0;
       
       [[nodiscard]] virtual lobe_mask_t lobes(wavenumber_t k) const noexcept = 0;
       
       [[nodiscard]] int lobe_count(wavenumber_t k) const noexcept {
           return lobes(k).count();
       }
       
       [[nodiscard]] virtual bool is_delta_only(wavenumber_t k) const noexcept = 0;
       
       [[nodiscard]] virtual bool is_delta_lobe(wavenumber_t k, std::uint32_t lobe) const noexcept = 0;
       
       [[nodiscard]] virtual bool needs_interaction_footprint() const noexcept { return false; }
   
       [[nodiscard]] virtual bsdf_result_t f(
               const dir3_t &wi,
               const dir3_t &wo,
               const bsdf_query_t& query) const noexcept = 0;
   
       [[nodiscard]] virtual std::optional<bsdf_sample_t> sample(
               const dir3_t &wi,
               const bsdf_query_t& query,
               sampler::sampler_t& sampler) const noexcept = 0;
       
       [[nodiscard]] virtual solid_angle_density_t pdf(
               const dir3_t &wi,
               const dir3_t &wo,
               const bsdf_query_t& query) const noexcept = 0;
       
       [[nodiscard]] virtual f_t eta(
               const dir3_t &wi,
               const dir3_t &wo,
               const wavenumber_t k) const noexcept = 0;
   
   public:
       static std::unique_ptr<bsdf_t> load(std::string id, scene::loader::loader_t* loader, const scene::loader::node_t& node, const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override = 0;
   };
   
   }
