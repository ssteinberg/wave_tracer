
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_scene_loader_node.hpp:

Program Listing for File node.hpp
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_scene_loader_node.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/scene/loader/node.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <memory>
   #include <map>
   #include <vector>
   #include <string>
   #include <ranges>
   
   namespace wt::scene::loader {
   
   class node_t {
   public:
       virtual ~node_t() noexcept = default;
   
       [[nodiscard]] std::partial_ordering operator<=>(const node_t& o) const noexcept {
           if (type() != o.type()) return std::partial_ordering::unordered;
           return path() <=> o.path();
       }
   
       [[nodiscard]] virtual const std::string& type() const noexcept = 0;
   
       [[nodiscard]] virtual const std::string& path() const noexcept = 0;
   
       [[nodiscard]] virtual const std::string& name() const noexcept = 0;
   
       [[nodiscard]] virtual bool has_attrib(const std::string& attribute) const noexcept = 0;
   
       [[nodiscard]] virtual const std::string& operator[](const std::string& attribute) const noexcept = 0;
       [[nodiscard]] virtual const std::map<std::string, std::string>& attributes() const noexcept = 0;
   
       virtual bool set_attribute(const std::string& name, const std::string& value) noexcept = 0;
   
       [[nodiscard]] virtual std::vector<const node_t*> children(const std::string& name) const noexcept = 0;
       [[nodiscard]] virtual const std::vector<std::unique_ptr<node_t>>& children() const noexcept = 0;
       [[nodiscard]] virtual std::vector<std::unique_ptr<node_t>> extract_children() && noexcept = 0;
   
       virtual bool add_child(std::unique_ptr<node_t> child) noexcept = 0;
       virtual bool replace_child(const node_t& child, std::vector<std::unique_ptr<node_t>> nodes) noexcept = 0;
       virtual bool erase_child(const node_t& node) noexcept = 0;
   
       [[nodiscard]] inline auto children_view() const noexcept {
           return this->children() | std::views::transform([](const auto& p) -> const auto& { return *p; });
       }
       [[nodiscard]] inline auto children_view() noexcept {
           return this->children() | std::views::transform([](auto& p) -> auto& { return *p; });
       }
   };
   
   }
