
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_scale.hpp:

Program Listing for File scale.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_scale.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/scale.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   #include <wt/texture/texture.hpp>
   
   namespace wt::texture {
   
   class scale_t final : public texture_t {
   private:
       std::shared_ptr<texture_t> tex, scale;
   
   public:
       scale_t(std::string id, 
               std::shared_ptr<texture_t> tex, 
               std::shared_ptr<texture_t> scale)
           : texture_t(std::move(id)),
             tex(std::move(tex)),
             scale(std::move(scale))
       {}
       scale_t(scale_t&&) = default;
       virtual ~scale_t() noexcept = default;
   
       [[nodiscard]] inline const auto* get_nested_texture() const noexcept {
           return tex.get();
       }
       [[nodiscard]] inline const auto* get_scale_texture() const noexcept {
           return scale.get();
       }
       
       [[nodiscard]] bool needs_interaction_footprint() const noexcept override {
           return tex->needs_interaction_footprint() || scale->needs_interaction_footprint();
       }
       
       [[nodiscard]] vec2_t resolution() const noexcept override {
           return m::max(tex->resolution(), scale->resolution());
       }
   
       [[nodiscard]] std::shared_ptr<spectrum::spectrum_real_t> mean_spectrum() const noexcept override {
           // not implemented
           return nullptr;
       }
   
       [[nodiscard]] std::optional<f_t> mean_value(wavenumber_t k) const noexcept override {
           const auto tmv = tex->mean_value(k);
           const auto smv = scale->mean_value(k);
           if (!tmv || !smv)
               return std::nullopt;
           return *tmv * *smv;
       }
   
       [[nodiscard]] vec4_t get_RGBA(const texture_query_t& query) const noexcept override {
           return tex->get_RGBA(query) * scale->get_RGBA(query);
       }
   
       [[nodiscard]] vec2_t f(const texture_query_t& query) const noexcept override {
           return tex->f(query) * scale->f(query);
       }
       
   public:
       static std::unique_ptr<texture_t> load(std::string id, 
                                              scene::loader::loader_t* loader, 
                                              const scene::loader::node_t& node, 
                                              const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
