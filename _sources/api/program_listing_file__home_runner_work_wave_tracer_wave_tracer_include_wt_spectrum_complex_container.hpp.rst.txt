
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_container.hpp:

Program Listing for File complex_container.hpp
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_complex_container.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/complex_container.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/scene/element/scene_element.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/range.hpp>
   #include <wt/math/distribution/distribution1d.hpp>
   
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/wt_context.hpp>
   
   namespace wt::spectrum {
   
   class complex_container_t final : public spectrum_t {
   private:
       std::shared_ptr<spectrum_real_t> real_spectrum;
       std::shared_ptr<spectrum_real_t> imag_spectrum;
   
   public:
       complex_container_t(
               std::string id,
               std::shared_ptr<spectrum_real_t> real,
               std::shared_ptr<spectrum_real_t> imag) 
           : spectrum_t(std::move(id)),
             real_spectrum(std::move(real)),
             imag_spectrum(std::move(imag))
       {
           assert(!!real_spectrum);
       }
       complex_container_t(const complex_container_t&) = default;
       complex_container_t(complex_container_t&&) = default;
       virtual ~complex_container_t() noexcept = default;
       
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override {
           if (!imag_spectrum) return real_spectrum->wavenumber_range();
           return real_spectrum->wavenumber_range() | imag_spectrum->wavenumber_range();
       }
       
       [[nodiscard]] c_t value(const wavenumber_t wavenumber) const noexcept override {
           return c_t{
               real_spectrum->f(wavenumber),
               imag_spectrum ? imag_spectrum->f(wavenumber) : 0,
           };
       }
       
       [[nodiscard]] inline c_t f(const wavenumber_t wavenumber) const noexcept {
           return value(wavenumber);
       }
   
   public:
       static std::unique_ptr<spectrum_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
