
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_assert.hpp:

Program Listing for File assert.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_assert.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/util/assert.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <cassert>
   #include <type_traits>
   #include <utility>
   
   #include <wt/util/concepts.hpp>
   #include <wt/math/defs.hpp>
   
   namespace wt {
   
   template <FloatingPoint Fp>
   static constexpr Fp f_t_assert_tolerance = std::is_same_v<Fp, float> ? 1e-6 : 1e-9;
   
   template <FloatingPoint Fp>
   inline void assert_iszero(Fp expression, Fp tolerance_scale = Fp(1)) noexcept {
       assert(glm::abs(expression) < f_t_assert_tolerance<Fp>*tolerance_scale);
   }
   
   template <FloatingPoint Fp>
   inline void assert_isnotzero(Fp expression, Fp tolerance_scale = Fp(1)) noexcept {
       assert(glm::abs(expression) >= f_t_assert_tolerance<Fp>*tolerance_scale);
   }
   
   template <FloatingPoint Fp, std::size_t Dim>
   inline void assert_unit_vector(const vec<Dim,Fp>& v, Fp tolerance_scale = Fp(1)) noexcept {
       assert_iszero<Fp>(glm::length(v)-1, tolerance_scale);
   }
   template <FloatingPoint Fp, typename... Ts>
   inline void assert_unit_vectors(Ts&&... ts) noexcept {
       (assert_unit_vector<Fp>(std::forward<Ts>(ts)), ...);
   }
   
   template <FloatingPoint Fp, std::size_t Dim>
   inline void assert_orthogonal_vectors(const vec<Dim,Fp>& v1, const vec<Dim,Fp>& v2,
                                         Fp tolerance_scale = Fp(1)) noexcept {
       assert_iszero<Fp,tolerance_scale>(glm::dot(v1,v2), tolerance_scale);
   }
   template <FloatingPoint Fp, std::size_t Dim>
   inline void assert_orthogonal_unit_vectors(const vec<Dim,Fp>& v1, const vec<Dim,Fp>& v2,
                                              Fp tolerance_scale = Fp(1)) noexcept {
       assert_unit_vectors<Fp>(v1,v2, tolerance_scale);
       assert_orthogonal_vectors<Fp>(v1,v2, tolerance_scale);
   }
   
   }
