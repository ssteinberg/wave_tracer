
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_concepts.hpp:

Program Listing for File concepts.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_util_concepts.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/util/concepts.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <type_traits>
   #include <complex>
   
   #include <wt/util/type_traits.hpp>
   
   #include <wt/math/glm.hpp>
   #include <wt/math/quantity/concepts.hpp>
   
   namespace wt {
   
   template <typename T>
   concept Enum = requires(T param) {
       requires std::is_enum_v<T>;
   };
   template <typename T>
   concept ScopedEnum = requires(T param) {
       requires is_scoped_enum_v<T>;
   };
   
   template <typename T>
   concept FloatingPoint = std::floating_point<T>;
   
   template <typename T>
   concept Integer = std::integral<T>;
   
   template <typename T>
   concept Complex = std::is_same_v<T,std::complex<float>> || std::is_same_v<T,std::complex<double>>;
   
   template <typename T>
   concept Numeric = requires(T param) {
       requires std::is_integral_v<T> || std::is_floating_point_v<T>;
       requires std::is_arithmetic_v<decltype(param+1)>;
       requires !std::is_same_v<bool, T>;
       requires !std::is_pointer_v<T>;
   };
   
   template <typename T>
   concept NumericOrComplex = Numeric<T> || Complex<T>;
   
   template<typename T>
   concept Scalar = Numeric<T> || Quantity<T> || QuantityPoint<T>;
   
   template<typename T>
   concept CScalar = Numeric<T> || Quantity<T> || QuantityPoint<T> || Complex<T>;
   
   template<typename T>
   concept ScalarOrUnit = Numeric<T> || Quantity<T> || QuantityPoint<T> || QuantityRef<T> || Unit<T>;
   
   template<typename T>
   concept QuantityOrUnit = Quantity<T> || QuantityPoint<T> || QuantityRef<T> || Unit<T>;
   
   template <typename T>
   concept NumericOrBool = Numeric<T> || std::is_same_v<T,bool>;
   
   template <typename T>
   concept ScalarOrBool = Scalar<T> || std::is_same_v<T,bool>;
   
   template <typename T>
   concept CScalarOrBool = CScalar<T> || std::is_same_v<T,bool>;
   
   
   namespace detail {
   
   template <std::size_t N, typename T>
   void to_base_specialization_of_glm_vector(const glm::vec<N, T>*);
   template<typename T>
   constexpr bool is_derived_from_specialization_of_glm_vector =
       requires(T* type) { to_base_specialization_of_glm_vector(type); };
   
   }
   
   template <typename T>
   concept NumericVector = detail::is_derived_from_specialization_of_glm_vector<T>;
   
   }
