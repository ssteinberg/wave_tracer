
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_blackbody.hpp:

Program Listing for File blackbody.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_spectrum_blackbody.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/spectrum/blackbody.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/sampler/sampler.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/math/range.hpp>
   #include <wt/wt_context.hpp>
   
   #include <wt/spectrum/colourspace/blackbody.hpp>
   #include "piecewise_linear.hpp"
   
   namespace wt::spectrum {
   
   class blackbody_t final : public spectrum_real_t {
   private:
       piecewise_linear_t spectrum;
       temperature_t T;
   
   public:
       blackbody_t(std::string id, const temperature_t T, const range_t<wavelength_t>& wl_range, const f_t scale);
       blackbody_t(const blackbody_t&) = default;
       blackbody_t(blackbody_t&&) = default;
   
       [[nodiscard]] inline auto temperature() const noexcept { return T; }
       [[nodiscard]] inline auto locus_XYZ() const noexcept { return colourspace::planckian_locus(temperature()); }
   
       [[nodiscard]] const distribution1d_t* distribution() const noexcept override {
           return spectrum.distribution();
       }
   
       [[nodiscard]] f_t power() const noexcept override {
           return spectrum.power();
       }
   
       [[nodiscard]] f_t power(const range_t<wavenumber_t>& wavenumbers) const noexcept override {
           return spectrum.power(wavenumbers);
       }
   
       [[nodiscard]] range_t<wavenumber_t> wavenumber_range() const noexcept override { return spectrum.wavenumber_range(); }
       
       [[nodiscard]] wavenumber_t mean_wavenumber() const noexcept override { return spectrum.mean_wavenumber(); }
       
       [[nodiscard]] f_t f(const wavenumber_t wavenumber) const noexcept override { return spectrum.f(wavenumber); }
       
   public:
       static std::unique_ptr<spectrum_real_t> load(std::string id, 
                                               scene::loader::loader_t* loader, 
                                               const scene::loader::node_t& node, 
                                               const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
