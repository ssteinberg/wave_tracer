
.. _program_listing_file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_constant.hpp:

Program Listing for File constant.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_wave_tracer_wave_tracer_include_wt_texture_constant.hpp>` (``/home/runner/work/wave_tracer/wave_tracer/include/wt/texture/constant.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   *
   * wave tracer
   * Copyright  Shlomi Steinberg
   *
   * LICENSE: Creative Commons Attribution-NonCommercial 4.0 International
   *
   */
   
   #pragma once
   
   #include <string>
   #include <memory>
   
   #include <wt/spectrum/spectrum.hpp>
   #include <wt/spectrum/uniform.hpp>
   
   #include <wt/math/common.hpp>
   #include <wt/wt_context.hpp>
   
   #include <wt/texture/texture.hpp>
   
   namespace wt::texture {
   
   class constant_t final : public texture_t {
   private:
       std::shared_ptr<spectrum::spectrum_real_t> spectrum;
   
   public:
       constant_t(std::string id, std::shared_ptr<spectrum::spectrum_real_t> spectrum)
           : texture_t(std::move(id)),
             spectrum(std::move(spectrum))
       {}
       constant_t(std::string id, f_t value)
           : texture_t(std::move(id)),
             spectrum(std::make_shared<spectrum::uniform_t>(get_id()+"_constant", value))
       {}
       constant_t(constant_t&&) = default;
       virtual ~constant_t() noexcept = default;
   
       [[nodiscard]] inline const auto& get_spectrum() const noexcept { return spectrum; }
       
       [[nodiscard]] vec2_t resolution() const noexcept override {
           return vec2_t{ 1 };
       }
   
       [[nodiscard]] std::shared_ptr<spectrum::spectrum_real_t> mean_spectrum() const noexcept override {
           return spectrum;
       }
   
       [[nodiscard]] std::optional<f_t> mean_value(wavenumber_t k) const noexcept override { return spectrum->f(k); }
   
       [[nodiscard]] vec4_t get_RGBA(const texture_query_t& query) const noexcept override {
           // not implemented
           assert(false);
           return {};
       }
   
       [[nodiscard]] vec2_t f(const texture_query_t& query) const noexcept override {
           return { spectrum->f(query.k),1 };
       }
       
   public:
       static std::unique_ptr<texture_t> load(std::string id, 
                                              scene::loader::loader_t* loader, 
                                              const scene::loader::node_t& node, 
                                              const wt::wt_context_t &context);
   
       [[nodiscard]] scene::element::info_t description() const override;
   };
   
   }
